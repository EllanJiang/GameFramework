<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameFramework</name>
    </assembly>
    <members>
        <member name="T:GameFramework.BaseEventArgs">
            <summary>
            事件基类。
            </summary>
        </member>
        <member name="P:GameFramework.BaseEventArgs.Id">
            <summary>
            获取类型编号。
            </summary>
        </member>
        <member name="T:GameFramework.EventPool`1">
            <summary>
            事件池。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
        </member>
        <member name="M:GameFramework.EventPool`1.#ctor(GameFramework.EventPoolMode)">
            <summary>
            初始化事件池的新实例。
            </summary>
            <param name="mode">事件池模式。</param>
        </member>
        <member name="P:GameFramework.EventPool`1.Count">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Update(System.Single,System.Single)">
            <summary>
            事件池轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Shutdown">
            <summary>
            关闭并清理事件池。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Check(System.Int32,System.EventHandler{`0})">
            <summary>
            检查订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.EventPool`1.Subscribe(System.Int32,System.EventHandler{`0})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Unsubscribe(System.Int32,System.EventHandler{`0})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Fire(System.Object,`0)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.FireNow(System.Object,`0)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.HandleEvent(System.Object,`0)">
            <summary>
            处理事件结点。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.EventPool`1.Event">
            <summary>
            事件结点。
            </summary>
        </member>
        <member name="T:GameFramework.EventPoolMode">
            <summary>
            事件池模式。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.Default">
            <summary>
            默认事件池模式，即必须存在有且只有一个事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowNoHandler">
            <summary>
            允许不存在事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowMultiHandler">
            <summary>
            允许存在多个事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowDuplicateHandler">
            <summary>
            允许存在重复的事件处理函数。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkAction">
            <summary>
            封装一个方法，该方法不具有参数并且不返回值。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`1">
            <summary>
            封装一个方法，该方法只有一个参数并且不返回值。
            </summary>
            <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
            <param name="obj">此委托封装的方法的参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`2">
            <summary>
            封装一个方法，该方法具有两个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`3">
            <summary>
            封装一个方法，该方法具有三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`4">
            <summary>
            封装一个方法，该方法具有四个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`5">
            <summary>
            封装一个方法，该方法具有五个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`6">
            <summary>
            封装一个方法，该方法具有六个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`7">
            <summary>
            封装一个方法，该方法具有七个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`8">
            <summary>
            封装一个方法，该方法具有八个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`9">
            <summary>
            封装一个方法，该方法具有九个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`10">
            <summary>
            封装一个方法，该方法具有十个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`11">
            <summary>
            封装一个方法，该方法具有十一个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`12">
            <summary>
            封装一个方法，该方法具有十二个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`13">
            <summary>
            封装一个方法，该方法具有十三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`14">
            <summary>
            封装一个方法，该方法具有十四个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`15">
            <summary>
            封装一个方法，该方法具有十五个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`16">
            <summary>
            封装一个方法，该方法具有十六个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <param name="arg16">此委托封装的方法的第十六个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkEntry">
            <summary>
            游戏框架入口。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkEntry.Version">
            <summary>
            获取游戏框架版本号。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.Update(System.Single,System.Single)">
            <summary>
            所有游戏框架模块轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.Shutdown">
            <summary>
            关闭并清理所有游戏框架模块。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.GetModule``1">
            <summary>
            获取游戏框架模块。
            </summary>
            <typeparam name="T">要获取的游戏框架模块类型。</typeparam>
            <returns>要获取的游戏框架模块。</returns>
            <remarks>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.GetModule(System.Type)">
            <summary>
            获取游戏框架模块。
            </summary>
            <param name="moduleType">要获取的游戏框架模块类型。</param>
            <returns>要获取的游戏框架模块。</returns>
            <remarks>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.CreateModule(System.Type)">
            <summary>
            创建游戏框架模块。
            </summary>
            <param name="moduleType">要创建的游戏框架模块类型。</param>
            <returns>要创建的游戏框架模块。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkEventArgs">
            <summary>
            游戏框架中包含事件数据的类的基类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEventArgs.#ctor">
            <summary>
            初始化游戏框架中包含事件数据的类的新实例。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkException">
            <summary>
            游戏框架异常类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor">
            <summary>
            初始化游戏框架异常类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化游戏框架异常类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化游戏框架异常类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化游戏框架异常类的新实例。
            </summary>
            <param name="info">存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">包含有关源或目标的上下文信息。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`1">
            <summary>
            封装一个方法，该方法不具有参数，但却返回 TResult 参数指定的类型的值。
            </summary>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`2">
            <summary>
            封装一个方法，该方法具有一个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg">此委托封装的方法的参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`3">
            <summary>
            封装一个方法，该方法具有两个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`4">
            <summary>
            封装一个方法，该方法具有三个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`5">
            <summary>
            封装一个方法，该方法具有四个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`6">
            <summary>
            封装一个方法，该方法具有五个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`7">
            <summary>
            封装一个方法，该方法具有六个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`8">
            <summary>
            封装一个方法，该方法具有七个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`9">
            <summary>
            封装一个方法，该方法具有八个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`10">
            <summary>
            封装一个方法，该方法具有九个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`11">
            <summary>
            封装一个方法，该方法具有十个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`12">
            <summary>
            封装一个方法，该方法具有十一个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`13">
            <summary>
            封装一个方法，该方法具有十二个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`14">
            <summary>
            封装一个方法，该方法具有十三个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`15">
            <summary>
            封装一个方法，该方法具有十四个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`16">
            <summary>
            封装一个方法，该方法具有十五个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`17">
            <summary>
            封装一个方法，该方法具有十六个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <param name="arg16">此委托封装的方法的第十六个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkModule">
            <summary>
            游戏框架模块抽象类。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkModule.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkModule.Update(System.Single,System.Single)">
            <summary>
            游戏框架模块轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkModule.Shutdown">
            <summary>
            关闭并清理游戏框架模块。
            </summary>
        </member>
        <member name="T:GameFramework.Log">
            <summary>
            日志类。
            </summary>
        </member>
        <member name="M:GameFramework.Log.SetLogCallback(GameFramework.LogCallback)">
            <summary>
            设置日志回调函数。
            </summary>
            <param name="logCallback">要设置的日志回调函数。</param>
        </member>
        <member name="M:GameFramework.Log.Debug(System.Object)">
            <summary>
            记录调试级别日志，仅在带有 DEBUG 预编译选项时产生。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.Log.Debug(System.String,System.Object)">
            <summary>
            记录调试级别日志，仅在带有 DEBUG 预编译选项时产生。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.Log.Debug(System.String,System.Object,System.Object)">
            <summary>
            记录调试级别日志，仅在带有 DEBUG 预编译选项时产生。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.Log.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            记录调试级别日志，仅在带有 DEBUG 预编译选项时产生。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.Log.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别日志，仅在带有 DEBUG 预编译选项时产生。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.Log.Info(System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="message">日志内容</param>
        </member>
        <member name="M:GameFramework.Log.Info(System.String,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.Log.Info(System.String,System.Object,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.Log.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.Log.Info(System.String,System.Object[])">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.Log.Warning(System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.Log.Warning(System.String,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.Log.Warning(System.String,System.Object,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.Log.Warning(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.Log.Warning(System.String,System.Object[])">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.Log.Error(System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.Log.Error(System.String,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.Log.Error(System.String,System.Object,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.Log.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.Log.Error(System.String,System.Object[])">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.Log.Fatal(System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.Log.Fatal(System.String,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.Log.Fatal(System.String,System.Object,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.Log.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.Log.Fatal(System.String,System.Object[])">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="T:GameFramework.LogCallback">
            <summary>
            日志回调函数。
            </summary>
            <param name="level">日志等级。</param>
            <param name="message">日志内容。</param>
        </member>
        <member name="T:GameFramework.LogLevel">
            <summary>
            日志等级。
            </summary>
        </member>
        <member name="F:GameFramework.LogLevel.Debug">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:GameFramework.LogLevel.Info">
            <summary>
            信息。
            </summary>
        </member>
        <member name="F:GameFramework.LogLevel.Warning">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:GameFramework.LogLevel.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:GameFramework.LogLevel.Fatal">
            <summary>
            严重错误。
            </summary>
        </member>
        <member name="T:GameFramework.ITask">
            <summary>
            任务接口。
            </summary>
        </member>
        <member name="P:GameFramework.ITask.SerialId">
            <summary>
            获取任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.ITask.Done">
            <summary>
            获取任务是否完成。
            </summary>
        </member>
        <member name="T:GameFramework.ITaskAgent`1">
            <summary>
            任务代理接口。
            </summary>
            <typeparam name="T">任务类型。</typeparam>
        </member>
        <member name="P:GameFramework.ITaskAgent`1.Task">
            <summary>
            获取任务。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Initialize">
            <summary>
            初始化任务代理。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Update(System.Single,System.Single)">
            <summary>
            任务代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Shutdown">
            <summary>
            关闭并清理任务代理。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Start(`0)">
            <summary>
            开始处理任务。
            </summary>
            <param name="task">要处理的任务。</param>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Reset">
            <summary>
            停止正在处理的任务并重置任务代理。
            </summary>
        </member>
        <member name="T:GameFramework.TaskPool`1">
            <summary>
            任务池。
            </summary>
            <typeparam name="T">任务类型。</typeparam>
        </member>
        <member name="M:GameFramework.TaskPool`1.#ctor">
            <summary>
            初始化任务池的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.TotalAgentCount">
            <summary>
            获取任务代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.FreeAgentCount">
            <summary>
            获取可用任务代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.WorkingAgentCount">
            <summary>
            获取工作中任务代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.WaitingTaskCount">
            <summary>
            获取等待任务数量。
            </summary>
        </member>
        <member name="M:GameFramework.TaskPool`1.Update(System.Single,System.Single)">
            <summary>
            任务池轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.Shutdown">
            <summary>
            关闭并清理任务池。
            </summary>
        </member>
        <member name="M:GameFramework.TaskPool`1.AddAgent(GameFramework.ITaskAgent{`0})">
            <summary>
            增加任务代理。
            </summary>
            <param name="agent">要增加的任务代理。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.AddTask(`0)">
            <summary>
            增加任务。
            </summary>
            <param name="task">要增加的任务。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.RemoveTask(System.Int32)">
            <summary>
            移除任务。
            </summary>
            <param name="serialId">要移除任务的序列编号。</param>
            <returns>被移除的任务。</returns>
        </member>
        <member name="M:GameFramework.TaskPool`1.RemoveAllTasks">
            <summary>
            移除所有任务。
            </summary>
        </member>
        <member name="T:GameFramework.Variable`1">
            <summary>
            变量。
            </summary>
            <typeparam name="T">变量类型。</typeparam>
        </member>
        <member name="M:GameFramework.Variable`1.#ctor">
            <summary>
            初始化变量的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.#ctor(`0)">
            <summary>
            初始化变量的新实例。
            </summary>
            <param name="value">初始值。</param>
        </member>
        <member name="P:GameFramework.Variable`1.Type">
            <summary>
            获取变量类型。
            </summary>
        </member>
        <member name="P:GameFramework.Variable`1.Value">
            <summary>
            获取或设置变量值。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.GetValue">
            <summary>
            获取变量值。
            </summary>
            <returns>变量值。</returns>
        </member>
        <member name="M:GameFramework.Variable`1.SetValue(System.Object)">
            <summary>
            设置变量值。
            </summary>
            <param name="value">变量值。</param>
        </member>
        <member name="M:GameFramework.Variable`1.Reset">
            <summary>
            重置变量值。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.ToString">
            <summary>
            获取变量字符串。
            </summary>
            <returns>变量字符串。</returns>
        </member>
        <member name="T:GameFramework.Variable">
            <summary>
            变量。
            </summary>
        </member>
        <member name="M:GameFramework.Variable.#ctor">
            <summary>
            初始化变量的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Variable.Type">
            <summary>
            获取变量类型。
            </summary>
        </member>
        <member name="M:GameFramework.Variable.GetValue">
            <summary>
            获取变量值。
            </summary>
            <returns>变量值。</returns>
        </member>
        <member name="M:GameFramework.Variable.SetValue(System.Object)">
            <summary>
            设置变量值。
            </summary>
            <param name="value">变量值。</param>
        </member>
        <member name="M:GameFramework.Variable.Reset">
            <summary>
            重置变量值。
            </summary>
        </member>
        <member name="T:GameFramework.DataNode.DataNodeManager">
            <summary>
            数据结点管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.#ctor">
            <summary>
            初始化数据结点管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.Root">
            <summary>
            获取根数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.Update(System.Single,System.Single)">
            <summary>
            数据结点管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.Shutdown">
            <summary>
            关闭并清理数据结点管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData(System.String)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData``1(System.String)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData``1(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.SetData``1(System.String,``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.SetData``1(System.String,``0,GameFramework.DataNode.IDataNode)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetNode(System.String)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetOrAddNode(System.String)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则创建相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetOrAddNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则增加相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.RemoveNode(System.String)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.RemoveNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.Clear">
            <summary>
            移除所有数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetSplitPath(System.String)">
            <summary>
            数据结点路径切分工具函数。
            </summary>
            <param name="path">要切分的数据结点路径。</param>
            <returns>切分后的字符串数组。</returns>
        </member>
        <member name="T:GameFramework.DataNode.DataNodeManager.DataNode">
            <summary>
            数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.#ctor(System.String,GameFramework.DataNode.DataNodeManager.DataNode)">
            <summary>
            初始化数据结点的新实例。
            </summary>
            <param name="name">数据结点名称。</param>
            <param name="parent">父数据结点。</param>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.Name">
            <summary>
            获取数据结点的名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.FullName">
            <summary>
            获取数据结点的完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.Parent">
            <summary>
            获取父数据结点。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.ChildCount">
            <summary>
            获取子数据结点的数量。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetData">
            <summary>
            获取数据结点的数据。
            </summary>
            <returns>数据结点数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetData``1">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.SetData``1(``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetChild(System.Int32)">
            <summary>
            根据索引获取子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
            <returns>指定索引的子数据结点，如果索引越界，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetChild(System.String)">
            <summary>
            根据名称获取子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetOrAddChild(System.String)">
            <summary>
            根据名称获取或增加子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果对应名称的子数据结点已存在，则返回已存在的子数据结点，否则增加子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetAllChild">
            <summary>
            获取所有子数据结点。
            </summary>
            <returns>所有子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.RemoveChild(System.Int32)">
            <summary>
            根据索引移除子数据结点。
            </summary>
            <param name="index">子数据结点的索引位置。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.RemoveChild(System.String)">
            <summary>
            根据名称移除子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.Clear">
            <summary>
            移除当前数据结点的数据和所有子数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.ToString">
            <summary>
            获取数据结点字符串。
            </summary>
            <returns>数据结点字符串。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.ToDataString">
            <summary>
            获取数据字符串。
            </summary>
            <returns>数据字符串。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.IsValidName(System.String)">
            <summary>
            检测数据结点名称是否合法。
            </summary>
            <param name="name">要检测的数据节点名称。</param>
            <returns>是否是合法的数据结点名称。</returns>
        </member>
        <member name="T:GameFramework.DataNode.IDataNode">
            <summary>
            数据结点接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.Name">
            <summary>
            获取数据结点的名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.FullName">
            <summary>
            获取数据结点的完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.Parent">
            <summary>
            获取父数据结点。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.ChildCount">
            <summary>
            获取子数据结点的数量。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetData">
            <summary>
            获取数据结点的数据。
            </summary>
            <returns>数据结点数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetData``1">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.SetData``1(``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetChild(System.Int32)">
            <summary>
            根据索引获取子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
            <returns>指定索引的子数据结点，如果索引越界，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetChild(System.String)">
            <summary>
            根据名称获取子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetOrAddChild(System.String)">
            <summary>
            根据名称获取或增加子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果对应名称的子数据结点已存在，则返回已存在的子数据结点，否则增加子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetAllChild">
            <summary>
            获取所有子数据结点。
            </summary>
            <returns>所有子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.RemoveChild(System.Int32)">
            <summary>
            根据索引移除子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.RemoveChild(System.String)">
            <summary>
            根据名称移除子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.Clear">
            <summary>
            移除当前数据结点的数据和所有子数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.ToString">
            <summary>
            获取数据结点字符串。
            </summary>
            <returns>数据结点字符串。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.ToDataString">
            <summary>
            获取数据字符串。
            </summary>
            <returns>数据字符串。</returns>
        </member>
        <member name="T:GameFramework.DataNode.IDataNodeManager">
            <summary>
            数据结点管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNodeManager.Root">
            <summary>
            获取根数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData(System.String)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData``1(System.String)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData``1(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.SetData``1(System.String,``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.SetData``1(System.String,``0,GameFramework.DataNode.IDataNode)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetNode(System.String)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetOrAddNode(System.String)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则创建相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetOrAddNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则创建相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.RemoveNode(System.String)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.RemoveNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.Clear">
            <summary>
            移除所有数据结点。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.DataTableBase">
            <summary>
            数据表基类。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.#ctor">
            <summary>
            初始化数据表基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.#ctor(System.String)">
            <summary>
            初始化数据表基类的新实例。
            </summary>
            <param name="name">数据表名称。</param>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.Name">
            <summary>
            获取数据表名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.Type">
            <summary>
            获取数据表行的类型。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.Count">
            <summary>
            获取数据表行数。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.Shutdown">
            <summary>
            关闭并清理数据表。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.DataTableManager">
            <summary>
            数据表管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.#ctor">
            <summary>
            初始化数据表管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.Count">
            <summary>
            获取数据表数量。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableSuccess">
            <summary>
            加载数据表成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableFailure">
            <summary>
            加载数据表失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableUpdate">
            <summary>
            加载数据表更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableDependencyAsset">
            <summary>
            加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.Update(System.Single,System.Single)">
            <summary>
            数据表管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.Shutdown">
            <summary>
            关闭并清理数据表管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.SetDataTableHelper(GameFramework.DataTable.IDataTableHelper)">
            <summary>
            设置数据表辅助器。
            </summary>
            <param name="dataTableHelper">数据表辅助器。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.LoadDataTable(System.String)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.LoadDataTable(System.String,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable``1">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable(System.Type)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable``1(System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable(System.Type,System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable``1">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable(System.Type)">
            <summary>
            获取数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable``1(System.String)">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable(System.Type,System.String)">
            <summary>
            获取数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetAllDataTables">
            <summary>
            获取所有数据表。
            </summary>
            <returns>所有数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.CreateDataTable``1(System.String)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="text">要解析的数据表文本。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.CreateDataTable``1(System.String,System.String)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <param name="text">要解析的数据表文本。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable``1">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable(System.Type)">
            <summary>
            销毁数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable``1(System.String)">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable(System.Type,System.String)">
            <summary>
            销毁数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="T:GameFramework.DataTable.DataTableManager.DataTable`1">
            <summary>
            数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.#ctor(System.String)">
            <summary>
            初始化数据表的新实例。
            </summary>
            <param name="name">数据表名称。</param>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.Type">
            <summary>
            获取数据表行的类型。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.Count">
            <summary>
            获取数据表行数。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.Item(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.MinIdDataRow">
            <summary>
            获取编号最小的数据表行。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.MaxIdDataRow">
            <summary>
            获取编号最大的数据表行。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.Shutdown">
            <summary>
            关闭并清理数据表。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.HasDataRow(System.Int32)">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.HasDataRow(System.Predicate{`0})">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRow(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRow(System.Predicate{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>符合条件的数据表行。</returns>
            <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.AddDataRow(System.String)">
            <summary>
            增加数据表行。
            </summary>
            <param name="dataRowText">要解析的数据表行文本。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetAllDataRows">
            <summary>
            获取所有数据表行。
            </summary>
            <returns>所有数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetAllDataRows(System.Predicate{`0})">
            <summary>
            获取所有符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>所有符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetAllDataRows(System.Comparison{`0})">
            <summary>
            获取所有排序后的数据表行。
            </summary>
            <param name="comparison">要排序的条件。</param>
            <returns>所有排序后的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetAllDataRows(System.Predicate{`0},System.Comparison{`0})">
            <summary>
            获取所有排序后的符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="comparison">要排序的条件。</param>
            <returns>所有排序后的符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetEnumerator">
            <summary>
            返回一个循环访问数据表的枚举器。
            </summary>
            <returns>可用于循环访问数据表的对象。</returns>
        </member>
        <member name="T:GameFramework.DataTable.IDataRow">
            <summary>
            数据表行接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataRow.Id">
            <summary>
            获取数据表行的编号。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataRow.ParseDataRow(System.String)">
            <summary>
            数据表行文本内容解析器。
            </summary>
            <param name="dataRowText">要解析的文本内容。</param>
        </member>
        <member name="T:GameFramework.DataTable.IDataTable`1">
            <summary>
            数据表接口。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Name">
            <summary>
            获取数据表名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Type">
            <summary>
            获取数据表行的类型。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Count">
            <summary>
            获取数据表行数。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Item(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.MinIdDataRow">
            <summary>
            获取编号最小的数据表行。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.MaxIdDataRow">
            <summary>
            获取编号最大的数据表行。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.HasDataRow(System.Int32)">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.HasDataRow(System.Predicate{`0})">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRow(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRow(System.Predicate{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>符合条件的数据表行。</returns>
            <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetAllDataRows">
            <summary>
            获取所有数据表行。
            </summary>
            <returns>所有数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetAllDataRows(System.Predicate{`0})">
            <summary>
            获取所有符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>所有符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetAllDataRows(System.Comparison{`0})">
            <summary>
            获取所有排序后的数据表行。
            </summary>
            <param name="comparison">要排序的条件。</param>
            <returns>所有排序后的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetAllDataRows(System.Predicate{`0},System.Comparison{`0})">
            <summary>
            获取所有排序后的符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="comparison">要排序的条件。</param>
            <returns>所有排序后的符合条件的数据表行。</returns>
        </member>
        <member name="T:GameFramework.DataTable.IDataTableHelper">
            <summary>
            数据表辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.LoadDataTable(System.Object,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAsset">数据表资源。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>加载是否成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.SplitToDataRows(System.String)">
            <summary>
            将要解析的数据表文本分割为数据表行文本。
            </summary>
            <param name="text">要解析的数据表文本。</param>
            <returns>数据表行文本。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.ReleaseDataTableAsset(System.Object)">
            <summary>
            释放数据表资源。
            </summary>
            <param name="dataTableAsset">要释放的数据表资源。</param>
        </member>
        <member name="T:GameFramework.DataTable.IDataTableManager">
            <summary>
            数据表管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTableManager.Count">
            <summary>
            获取数据表数量。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableSuccess">
            <summary>
            加载数据表成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableFailure">
            <summary>
            加载数据表失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableUpdate">
            <summary>
            加载数据表更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableDependencyAsset">
            <summary>
            加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.SetDataTableHelper(GameFramework.DataTable.IDataTableHelper)">
            <summary>
            设置数据表辅助器。
            </summary>
            <param name="dataTableHelper">数据表辅助器。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.LoadDataTable(System.String)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.LoadDataTable(System.String,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable``1">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable(System.Type)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable``1(System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable(System.Type,System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable``1">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable(System.Type)">
            <summary>
            获取数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable``1(System.String)">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable(System.Type,System.String)">
            <summary>
            获取数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetAllDataTables">
            <summary>
            获取所有数据表。
            </summary>
            <returns>所有数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.CreateDataTable``1(System.String)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="text">要解析的数据表文本。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.CreateDataTable``1(System.String,System.String)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <param name="text">要解析的数据表文本。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable``1">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable(System.Type)">
            <summary>
            销毁数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable``1(System.String)">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable(System.Type,System.String)">
            <summary>
            销毁数据表。
            </summary>
            <param name="type">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs">
            <summary>
            加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            初始化加载数据表时加载依赖资源事件的新实例。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableFailureEventArgs">
            <summary>
            加载数据表失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableFailureEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
            初始化加载数据表失败事件的新实例。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableFailureEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableSuccessEventArgs">
            <summary>
            加载数据表成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableSuccessEventArgs.#ctor(System.String,System.Single,System.Object)">
            <summary>
            初始化加载数据表成功事件的新实例。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableSuccessEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableUpdateEventArgs">
            <summary>
            加载数据表更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableUpdateEventArgs.#ctor(System.String,System.Single,System.Object)">
            <summary>
            初始化加载数据表更新事件的新实例。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="progress">加载数据表进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableUpdateEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableUpdateEventArgs.Progress">
            <summary>
            获取加载数据表进度。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Debugger.DebuggerManager">
            <summary>
            调试管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.#ctor">
            <summary>
            初始化调试管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.ActiveWindow">
            <summary>
            获取或设置调试窗口是否激活。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowRoot">
            <summary>
            调试窗口根节点。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.Update(System.Single,System.Single)">
            <summary>
            调试管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.Shutdown">
            <summary>
            关闭并清理调试管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow,System.Object[])">
            <summary>
            注册调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <param name="debuggerWindow">要注册的调试窗口。</param>
            <param name="args">初始化调试窗口参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.GetDebuggerWindow(System.String)">
            <summary>
            获取调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <returns>要获取的调试窗口。</returns>
        </member>
        <member name="T:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup">
            <summary>
            调试窗口组。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.DebuggerWindowCount">
            <summary>
            获取调试窗口数量。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.SelectedIndex">
            <summary>
            获取或设置当前选中的调试窗口索引。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.SelectedWindow">
            <summary>
            获取当前选中的调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.Initialize(System.Object[])">
            <summary>
            初始化调试组。
            </summary>
            <param name="args">初始化调试组参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.Shutdown">
            <summary>
            关闭调试组。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnEnter">
            <summary>
            进入调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnLeave">
            <summary>
            离开调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnUpdate(System.Single,System.Single)">
            <summary>
            调试组轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnDraw">
            <summary>
            调试窗口绘制。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.GetDebuggerWindowNames">
            <summary>
            获取调试组的调试窗口名称集合。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.GetDebuggerWindow(System.String)">
            <summary>
            获取调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <returns>要获取的调试窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow)">
            <summary>
            注册调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <param name="debuggerWindow">要注册的调试窗口。</param>
        </member>
        <member name="T:GameFramework.Debugger.IDebuggerManager">
            <summary>
            调试管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerManager.ActiveWindow">
            <summary>
            获取或设置调试窗口是否激活。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerManager.DebuggerWindowRoot">
            <summary>
            调试窗口根节点。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerManager.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow,System.Object[])">
            <summary>
            注册调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <param name="debuggerWindow">要注册的调试窗口。</param>
            <param name="args">初始化调试窗口参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerManager.GetDebuggerWindow(System.String)">
            <summary>
            获取调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <returns>要获取的调试窗口。</returns>
        </member>
        <member name="T:GameFramework.Debugger.IDebuggerWindow">
            <summary>
            调试窗口接口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.Initialize(System.Object[])">
            <summary>
            初始化调试窗口。
            </summary>
            <param name="args">初始化调试窗口参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.Shutdown">
            <summary>
            关闭调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnEnter">
            <summary>
            进入调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnLeave">
            <summary>
            离开调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnUpdate(System.Single,System.Single)">
            <summary>
            调试窗口轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnDraw">
            <summary>
            调试窗口绘制。
            </summary>
        </member>
        <member name="T:GameFramework.Debugger.IDebuggerWindowGroup">
            <summary>
            调试窗口组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerWindowGroup.DebuggerWindowCount">
            <summary>
            获取调试窗口数量。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerWindowGroup.SelectedIndex">
            <summary>
            获取或设置当前选中的调试窗口索引。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerWindowGroup.SelectedWindow">
            <summary>
            获取当前选中的调试窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindowGroup.GetDebuggerWindowNames">
            <summary>
            获取调试组的调试窗口名称集合。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindowGroup.GetDebuggerWindow(System.String)">
            <summary>
            获取调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <returns>要获取的调试窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindowGroup.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow)">
            <summary>
            注册调试窗口。
            </summary>
            <param name="path">调试窗口路径。</param>
            <param name="debuggerWindow">要注册的调试窗口。</param>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperCompleteEventArgs">
            <summary>
             下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.#ctor(System.Int32,System.Byte[])">
            <summary>
            初始化下载代理辅助器完成事件的新实例。
            </summary>
            <param name="length">下载的数据大小。</param>
            <param name="bytes">下载的数据流。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.Length">
            <summary>
            获取下载的数据大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.GetBytes">
            <summary>
            获取下载的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperErrorEventArgs">
            <summary>
             下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperErrorEventArgs.#ctor(System.String)">
            <summary>
            初始化下载代理辅助器错误事件的新实例。
            </summary>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperUpdateEventArgs">
            <summary>
             下载代理辅助器更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateEventArgs.#ctor(System.Int32,System.Byte[])">
            <summary>
            初始化下载代理辅助器更新事件的新实例。
            </summary>
            <param name="length">下载的数据大小。</param>
            <param name="bytes">下载的数据流。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperUpdateEventArgs.Length">
            <summary>
            获取下载的数据大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateEventArgs.GetBytes">
            <summary>
            获取下载的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadFailureEventArgs">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadFailureEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            初始化下载失败事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager">
            <summary>
            下载管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.#ctor">
            <summary>
            初始化下载管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.TotalAgentCount">
            <summary>
            获取下载代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.FreeAgentCount">
            <summary>
            获取可用下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.WorkingAgentCount">
            <summary>
            获取工作中下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.WaitingTaskCount">
            <summary>
            获取等待下载任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.FlushSize">
            <summary>
            获取或设置将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Timeout">
            <summary>
            获取或设置下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.CurrentSpeed">
            <summary>
            获取当前下载速度。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadStart">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadUpdate">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadSuccess">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadFailure">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.Update(System.Single,System.Single)">
            <summary>
            下载管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.Shutdown">
            <summary>
            关闭并清理下载管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownloadAgentHelper(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            增加下载代理辅助器。
            </summary>
            <param name="downloadAgentHelper">要增加的下载代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.RemoveDownload(System.Int32)">
            <summary>
            移除下载任务。
            </summary>
            <param name="serialId">要移除下载任务的序列编号。</param>
            <returns>是否移除下载任务成功。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.RemoveAllDownload">
            <summary>
            移除所有下载任务。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadAgent">
            <summary>
            下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.#ctor(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            初始化下载代理的新实例。
            </summary>
            <param name="downloadAgentHelper">下载代理辅助器。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.Task">
            <summary>
            获取下载任务。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.WaitTime">
            <summary>
            获取已经等待时间。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.StartLength">
            <summary>
            获取开始下载时已经存在的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.DownloadedLength">
            <summary>
            获取本次已经下载的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.CurrentLength">
            <summary>
            获取当前的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.SavedLength">
            <summary>
            获取已经存盘的大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Initialize">
            <summary>
            初始化下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Update(System.Single,System.Single)">
            <summary>
            下载代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Shutdown">
            <summary>
            关闭并清理下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Start(GameFramework.Download.DownloadManager.DownloadTask)">
            <summary>
            开始处理下载任务。
            </summary>
            <param name="task">要处理的下载任务。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Reset">
            <summary>
            重置下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing">释放资源标记。</param>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadTask">
            <summary>
            下载任务。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadTask.#ctor(System.String,System.String,System.Int32,System.Single,System.Object)">
            <summary>
            初始化下载任务的新实例。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="flushSize">将缓冲区写入磁盘的临界大小。</param>
            <param name="timeout">下载超时时长，以秒为单位。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Done">
            <summary>
            获取或设置下载任务是否完成。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Status">
            <summary>
            获取或设置下载任务的状态。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.DownloadUri">
            <summary>
            获取原始下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.FlushSize">
            <summary>
            获取将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Timeout">
            <summary>
            获取下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadTaskStatus">
            <summary>
            下载任务的状态。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Todo">
            <summary>
            准备下载。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Doing">
            <summary>
            下载中。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Done">
            <summary>
            下载完成。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Error">
            <summary>
            下载错误。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadStartEventArgs">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadStartEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            初始化下载开始事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadSuccessEventArgs">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadSuccessEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            初始化下载成功事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadUpdateEventArgs">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadUpdateEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            初始化下载更新事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.IDownloadAgentHelper">
            <summary>
            下载代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperUpdate">
            <summary>
            下载代理辅助器更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperComplete">
            <summary>
            下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperError">
            <summary>
            下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Int32,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="fromPosition">下载数据起始位置。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="fromPosition">下载数据起始位置。</param>
            <param name="toPosition">下载数据结束位置。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Reset">
            <summary>
            重置下载代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.Download.IDownloadManager">
            <summary>
            下载管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.TotalAgentCount">
            <summary>
            获取下载代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.FreeAgentCount">
            <summary>
            获取可用下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.WorkingAgentCount">
            <summary>
            获取工作中下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.WaitingTaskCount">
            <summary>
            获取等待下载任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.FlushSize">
            <summary>
            获取或设置将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.Timeout">
            <summary>
            获取或设置下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.CurrentSpeed">
            <summary>
            获取当前下载速度。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadStart">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadUpdate">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadSuccess">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadFailure">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownloadAgentHelper(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            增加下载代理辅助器。
            </summary>
            <param name="downloadAgentHelper">要增加的下载代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.RemoveDownload(System.Int32)">
            <summary>
            移除下载任务。
            </summary>
            <param name="serialId">要移除下载任务的序列编号。</param>
            <returns>是否移除下载任务成功。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.RemoveAllDownload">
            <summary>
            移除所有下载任务。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.EntityManager">
            <summary>
            实体管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.#ctor">
            <summary>
            初始化实体管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityCount">
            <summary>
            获取实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroupCount">
            <summary>
            获取实体组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntitySuccess">
            <summary>
            显示实体成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntityFailure">
            <summary>
            显示实体失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntityUpdate">
            <summary>
            显示实体更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntityDependencyAsset">
            <summary>
            显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.HideEntityComplete">
            <summary>
            隐藏实体完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.Update(System.Single,System.Single)">
            <summary>
            实体管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.Shutdown">
            <summary>
            关闭并清理实体管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetEntityHelper(GameFramework.Entity.IEntityHelper)">
            <summary>
            设置实体辅助器。
            </summary>
            <param name="entityHelper">实体辅助器。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HasEntityGroup(System.String)">
            <summary>
            是否存在实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>是否存在实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntityGroup(System.String)">
            <summary>
            获取实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>要获取的实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllEntityGroups">
            <summary>
            获取所有实体组。
            </summary>
            <returns>所有实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AddEntityGroup(System.String,System.Single,System.Int32,System.Single,System.Int32,GameFramework.Entity.IEntityGroupHelper)">
            <summary>
            增加实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <param name="instanceAutoReleaseInterval">实体实例对象池自动释放可释放对象的间隔秒数。</param>
            <param name="instanceCapacity">实体实例对象池容量。</param>
            <param name="instanceExpireTime">实体实例对象池对象过期秒数。</param>
            <param name="instancePriority">实体实例对象池的优先级。</param>
            <param name="entityGroupHelper">实体组辅助器。</param>
            <returns>是否增加实体组成功。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HasEntity(System.Int32)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HasEntity(System.String)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntity(System.Int32)">
            <summary>
            获取实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntity(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntities(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllLoadedEntities">
            <summary>
            获取所有已加载的实体。
            </summary>
            <returns>所有已加载的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllLoadingEntityIds">
            <summary>
            获取所有正在加载实体的编号。
            </summary>
            <returns>所有正在加载实体的编号。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.IsLoadingEntity(System.Int32)">
            <summary>
            是否正在加载实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否正在加载实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.IsValidEntity(GameFramework.Entity.IEntity)">
            <summary>
            是否是合法的实体。
            </summary>
            <param name="entity">实体。</param>
            <returns>实体是否合法。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.ShowEntity(System.Int32,System.String,System.String)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.ShowEntity(System.Int32,System.String,System.String,System.Object)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(System.Int32)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(System.Int32,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(GameFramework.Entity.IEntity)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideAllLoadedEntities">
            <summary>
            隐藏所有已加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideAllLoadedEntities(System.Object)">
            <summary>
            隐藏所有已加载的实体。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideAllLoadingEntities">
            <summary>
            隐藏所有正在加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetParentEntity(System.Int32)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntityId">要获取父实体的子实体的实体编号。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetParentEntity(GameFramework.Entity.IEntity)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntity">要获取父实体的子实体。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetChildEntities(System.Int32)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntityId">要获取子实体的父实体的实体编号。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntity">要获取子实体的父实体。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(System.Int32)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(System.Int32,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(GameFramework.Entity.IEntity)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(System.Int32)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(System.Int32,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetInstanceLocked(GameFramework.Entity.IEntity,System.Boolean)">
            <summary>
            设置实体实例是否被加锁。
            </summary>
            <param name="entity">实体。</param>
            <param name="locked">实体实例是否被加锁。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetInstancePriority(GameFramework.Entity.IEntity,System.Int32)">
            <summary>
            设置实体实例的优先级。
            </summary>
            <param name="entity">实体。</param>
            <param name="priority">实体实例优先级。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntityInfo(System.Int32)">
            <summary>
            获取实体信息。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>实体信息。</returns>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityGroup">
            <summary>
            实体组。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.#ctor(System.String,System.Single,System.Int32,System.Single,System.Int32,GameFramework.Entity.IEntityGroupHelper,GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            初始化实体组的新实例。
            </summary>
            <param name="name">实体组名称。</param>
            <param name="instanceAutoReleaseInterval">实体实例对象池自动释放可释放对象的间隔秒数。</param>
            <param name="instanceCapacity">实体实例对象池容量。</param>
            <param name="instanceExpireTime">实体实例对象池对象过期秒数。</param>
            <param name="instancePriority">实体实例对象池的优先级。</param>
            <param name="entityGroupHelper">实体组辅助器。</param>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.Name">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.EntityCount">
            <summary>
            获取实体组中实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstanceAutoReleaseInterval">
            <summary>
            获取或设置实体组实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstanceCapacity">
            <summary>
            获取或设置实体组实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstanceExpireTime">
            <summary>
            获取或设置实体组实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstancePriority">
            <summary>
            获取或设置实体组实例对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.Helper">
            <summary>
            获取实体组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.Update(System.Single,System.Single)">
            <summary>
            实体组轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.HasEntity(System.Int32)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.HasEntity(System.String)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntity(System.Int32)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntity(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntities(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetAllEntities">
            <summary>
            从实体组中获取所有实体。
            </summary>
            <returns>实体组中的所有实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.AddEntity(GameFramework.Entity.IEntity)">
            <summary>
            往实体组增加实体。
            </summary>
            <param name="entity">要增加的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.RemoveEntity(GameFramework.Entity.IEntity)">
            <summary>
            从实体组移除实体。
            </summary>
            <param name="entity">要移除的实体。</param>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityInfo">
            <summary>
            实体信息。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityInstanceObject">
            <summary>
            实体实例对象。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityStatus">
            <summary>
            实体状态。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.HideEntityCompleteEventArgs">
            <summary>
            隐藏实体完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.HideEntityCompleteEventArgs.#ctor(System.Int32,System.String,GameFramework.Entity.IEntityGroup,System.Object)">
            <summary>
            初始化隐藏实体完成事件的新实例。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroup">实体所属的实体组。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.EntityGroup">
            <summary>
            获取实体所属的实体组。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.IEntity">
            <summary>
            实体接口。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.Id">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.Handle">
            <summary>
            获取实体实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.EntityGroup">
            <summary>
            获取实体所属的实体组。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnInit(System.Int32,System.String,GameFramework.Entity.IEntityGroup,System.Boolean,System.Object)">
            <summary>
            实体初始化。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroup">实体所属的实体组。</param>
            <param name="isNewInstance">是否是新实例。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnRecycle">
            <summary>
            实体回收。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnShow(System.Object)">
            <summary>
            实体显示。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnHide(System.Object)">
            <summary>
            实体隐藏。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnAttached(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体附加子实体。
            </summary>
            <param name="childEntity">附加的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnDetached(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体解除子实体。
            </summary>
            <param name="childEntity">解除的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnAttachTo(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体附加子实体。
            </summary>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnDetachFrom(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体解除子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnUpdate(System.Single,System.Single)">
            <summary>
            实体轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Entity.IEntityGroup">
            <summary>
            实体组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.Name">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.EntityCount">
            <summary>
            获取实体组中实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstanceAutoReleaseInterval">
            <summary>
            获取或设置实体组实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstanceCapacity">
            <summary>
            获取或设置实体组实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstanceExpireTime">
            <summary>
            获取或设置实体组实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstancePriority">
            <summary>
            获取或设置实体组实例对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.Helper">
            <summary>
            获取实体组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.HasEntity(System.Int32)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.HasEntity(System.String)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntity(System.Int32)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntity(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntities(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetAllEntities">
            <summary>
            从实体组中获取所有实体。
            </summary>
            <returns>实体组中的所有实体。</returns>
        </member>
        <member name="T:GameFramework.Entity.IEntityGroupHelper">
            <summary>
            实体组辅助器接口。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.IEntityHelper">
            <summary>
            实体辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityHelper.InstantiateEntity(System.Object)">
            <summary>
            实例化实体。
            </summary>
            <param name="entityAsset">要实例化的实体资源。</param>
            <returns>实例化后的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityHelper.CreateEntity(System.Object,GameFramework.Entity.IEntityGroup,System.Object)">
            <summary>
            创建实体。
            </summary>
            <param name="entityInstance">实体实例。</param>
            <param name="entityGroup">实体所属的实体组。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityHelper.ReleaseEntity(System.Object,System.Object)">
            <summary>
            释放实体。
            </summary>
            <param name="entityAsset">要释放的实体资源。</param>
            <param name="entityInstance">要释放的实体实例。</param>
        </member>
        <member name="T:GameFramework.Entity.IEntityManager">
            <summary>
            实体管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityManager.EntityCount">
            <summary>
            获取实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityManager.EntityGroupCount">
            <summary>
            获取实体组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntitySuccess">
            <summary>
            显示实体成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntityFailure">
            <summary>
            显示实体失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntityUpdate">
            <summary>
            显示实体更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntityDependencyAsset">
            <summary>
            显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.HideEntityComplete">
            <summary>
            隐藏实体完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetEntityHelper(GameFramework.Entity.IEntityHelper)">
            <summary>
            设置实体辅助器。
            </summary>
            <param name="entityHelper">实体辅助器。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HasEntityGroup(System.String)">
            <summary>
            是否存在实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>是否存在实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntityGroup(System.String)">
            <summary>
            获取实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>要获取的实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllEntityGroups">
            <summary>
            获取所有实体组。
            </summary>
            <returns>所有实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AddEntityGroup(System.String,System.Single,System.Int32,System.Single,System.Int32,GameFramework.Entity.IEntityGroupHelper)">
            <summary>
            增加实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <param name="instanceAutoReleaseInterval">实体实例对象池自动释放可释放对象的间隔秒数。</param>
            <param name="instanceCapacity">实体实例对象池容量。</param>
            <param name="instanceExpireTime">实体实例对象池对象过期秒数。</param>
            <param name="instancePriority">实体实例对象池的优先级。</param>
            <param name="entityGroupHelper">实体组辅助器。</param>
            <returns>是否增加实体组成功。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HasEntity(System.Int32)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HasEntity(System.String)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntity(System.Int32)">
            <summary>
            获取实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntity(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntities(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllLoadedEntities">
            <summary>
            获取所有已加载的实体。
            </summary>
            <returns>所有已加载的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllLoadingEntityIds">
            <summary>
            获取所有正在加载实体的编号。
            </summary>
            <returns>所有正在加载实体的编号。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.IsLoadingEntity(System.Int32)">
            <summary>
            是否正在加载实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否正在加载实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.IsValidEntity(GameFramework.Entity.IEntity)">
            <summary>
            是否是合法的实体。
            </summary>
            <param name="entity">实体。</param>
            <returns>实体是否合法。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.ShowEntity(System.Int32,System.String,System.String)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.ShowEntity(System.Int32,System.String,System.String,System.Object)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(System.Int32)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(System.Int32,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(GameFramework.Entity.IEntity)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideAllLoadedEntities">
            <summary>
            隐藏所有已加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideAllLoadedEntities(System.Object)">
            <summary>
            隐藏所有已加载的实体。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideAllLoadingEntities">
            <summary>
            隐藏所有正在加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetParentEntity(System.Int32)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntityId">要获取父实体的子实体的实体编号。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetParentEntity(GameFramework.Entity.IEntity)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntity">要获取父实体的子实体。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetChildEntities(System.Int32)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntityId">要获取子实体的父实体的实体编号。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntity">要获取子实体的父实体。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(System.Int32)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(System.Int32,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(GameFramework.Entity.IEntity)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(System.Int32)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(System.Int32,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetInstanceLocked(GameFramework.Entity.IEntity,System.Boolean)">
            <summary>
            设置实体实例是否被加锁。
            </summary>
            <param name="entity">实体。</param>
            <param name="locked">实体实例是否被加锁。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetInstancePriority(GameFramework.Entity.IEntity,System.Int32)">
            <summary>
            设置实体实例的优先级。
            </summary>
            <param name="entity">实体。</param>
            <param name="priority">实体实例优先级。</param>
        </member>
        <member name="T:GameFramework.Entity.ShowEntityDependencyAssetEventArgs">
            <summary>
            显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            初始化显示实体时加载依赖资源事件的新实例。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.EntityGroupName">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.ShowEntityFailureEventArgs">
            <summary>
            显示实体失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityFailureEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            初始化显示实体失败事件的新实例。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.EntityGroupName">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.ShowEntitySuccessEventArgs">
            <summary>
            显示实体成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntitySuccessEventArgs.#ctor(GameFramework.Entity.IEntity,System.Single,System.Object)">
            <summary>
            初始化显示实体成功事件的新实例。
            </summary>
            <param name="entity">加载成功的实体。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Entity.ShowEntitySuccessEventArgs.Entity">
            <summary>
            获取显示成功的实体。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntitySuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntitySuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.ShowEntityUpdateEventArgs">
            <summary>
            显示实体更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityUpdateEventArgs.#ctor(System.Int32,System.String,System.String,System.Single,System.Object)">
            <summary>
            初始化显示实体更新事件的新实例。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="progress">显示实体进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.EntityGroupName">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.Progress">
            <summary>
            获取显示实体进度。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Event.EventManager">
            <summary>
            事件管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Event.EventManager.#ctor">
            <summary>
            初始化事件管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Event.EventManager.Count">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="P:GameFramework.Event.EventManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="M:GameFramework.Event.EventManager.Update(System.Single,System.Single)">
            <summary>
            事件管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.Shutdown">
            <summary>
            关闭并清理事件管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Event.EventManager.Check(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            检查订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.Event.EventManager.Subscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.Unsubscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.Fire(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.FireNow(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.Event.GameEventArgs">
            <summary>
            游戏逻辑事件基类。
            </summary>
        </member>
        <member name="T:GameFramework.Event.IEventManager">
            <summary>
            事件管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Event.IEventManager.Count">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Check(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            检查订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Subscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Unsubscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Fire(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.FireNow(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.Fsm.Fsm`1">
            <summary>
            有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.#ctor(System.String,`0,GameFramework.Fsm.FsmState{`0}[])">
            <summary>
            初始化有限状态机的新实例。
            </summary>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.Owner">
            <summary>
            获取有限状态机持有者。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.OwnerType">
            <summary>
            获取有限状态机持有者类型。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.FsmStateCount">
            <summary>
            获取有限状态机中状态的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.IsRunning">
            <summary>
            获取有限状态机是否正在运行。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.IsDestroyed">
            <summary>
            获取有限状态机是否被销毁。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.CurrentState">
            <summary>
            获取当前有限状态机状态。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.CurrentStateName">
            <summary>
            获取当前有限状态机状态名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.CurrentStateTime">
            <summary>
            获取当前有限状态机状态持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Update(System.Single,System.Single)">
            <summary>
            有限状态机轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Shutdown">
            <summary>
            关闭并清理有限状态机。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Start``1">
            <summary>
            开始有限状态机。
            </summary>
            <typeparam name="TState">要开始的有限状态机状态类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Start(System.Type)">
            <summary>
            开始有限状态机。
            </summary>
            <param name="stateType">要开始的有限状态机状态类型。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.HasState``1">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <typeparam name="TState">要检查的有限状态机状态类型。</typeparam>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.HasState(System.Type)">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <param name="stateType">要检查的有限状态机状态类型。</param>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetState``1">
            <summary>
            获取有限状态机状态。
            </summary>
            <typeparam name="TState">要获取的有限状态机状态类型。</typeparam>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetState(System.Type)">
            <summary>
            获取有限状态机状态。
            </summary>
            <param name="stateType">要获取的有限状态机状态类型。</param>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.FireEvent(System.Object,System.Int32)">
            <summary>
            抛出有限状态机事件。
            </summary>
            <param name="sender">事件源。</param>
            <param name="eventId">事件编号。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.FireEvent(System.Object,System.Int32,System.Object)">
            <summary>
            抛出有限状态机事件。
            </summary>
            <param name="sender">事件源。</param>
            <param name="eventId">事件编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.HasData(System.String)">
            <summary>
            是否存在有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>有限状态机数据是否存在。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetData(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetData``1(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <typeparam name="TData">要获取的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.SetData``1(System.String,``0)">
            <summary>
            设置有限状态机数据。
            </summary>
            <typeparam name="TData">要设置的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <param name="data">要设置的有限状态机数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.RemoveData(System.String)">
            <summary>
            移除有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>是否移除有限状态机数据成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.ChangeState``1">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <typeparam name="TState">要切换到的有限状态机状态类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.ChangeState(System.Type)">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <param name="stateType">要切换到的有限状态机状态类型。</param>
        </member>
        <member name="T:GameFramework.Fsm.FsmBase">
            <summary>
            有限状态机基类。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.#ctor">
            <summary>
            初始化有限状态机基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.#ctor(System.String)">
            <summary>
            初始化有限状态机基类的新实例。
            </summary>
            <param name="name">有限状态机名称。</param>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.Name">
            <summary>
            获取有限状态机名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.OwnerType">
            <summary>
            获取有限状态机持有者类型。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.FsmStateCount">
            <summary>
            获取有限状态机中状态的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.IsRunning">
            <summary>
            获取有限状态机是否正在运行。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.IsDestroyed">
            <summary>
            获取有限状态机是否被销毁。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.CurrentStateName">
            <summary>
            获取当前有限状态机状态名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.CurrentStateTime">
            <summary>
            获取当前有限状态机状态持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.Update(System.Single,System.Single)">
            <summary>
            有限状态机轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">当前已流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.Shutdown">
            <summary>
            关闭并清理有限状态机。
            </summary>
        </member>
        <member name="T:GameFramework.Fsm.FsmEventHandler`1">
            <summary>
            有限状态机事件响应函数。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="fsm">有限状态机引用。</param>
            <param name="sender">事件源。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Fsm.FsmManager">
            <summary>
            有限状态机管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.#ctor">
            <summary>
            初始化有限状态机管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Fsm.FsmManager.Count">
            <summary>
            获取有限状态机数量。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.Update(System.Single,System.Single)">
            <summary>
            有限状态机管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.Shutdown">
            <summary>
            关闭并清理有限状态机管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.HasFsm``1">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.HasFsm``1(System.String)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetFsm``1">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetFsm``1(System.String)">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetAllFsms">
            <summary>
            获取所有有限状态机。
            </summary>
            <returns>所有有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.CreateFsm``1(``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.CreateFsm``1(System.String,``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm``1">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm``1(System.String)">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">要销毁的有限状态机名称。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm``1(GameFramework.Fsm.IFsm{``0})">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="fsm">要销毁的有限状态机。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="T:GameFramework.Fsm.FsmState`1">
            <summary>
            有限状态机状态基类。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.#ctor">
            <summary>
            初始化有限状态机状态基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnInit(GameFramework.Fsm.IFsm{`0})">
            <summary>
            有限状态机状态初始化时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnEnter(GameFramework.Fsm.IFsm{`0})">
            <summary>
            有限状态机状态进入时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnUpdate(GameFramework.Fsm.IFsm{`0},System.Single,System.Single)">
            <summary>
            有限状态机状态轮询时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnLeave(GameFramework.Fsm.IFsm{`0},System.Boolean)">
            <summary>
            有限状态机状态离开时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="isShutdown">是否是关闭有限状态机时触发。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnDestroy(GameFramework.Fsm.IFsm{`0})">
            <summary>
            有限状态机状态销毁时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.SubscribeEvent(System.Int32,GameFramework.Fsm.FsmEventHandler{`0})">
            <summary>
            订阅有限状态机事件。
            </summary>
            <param name="eventId">事件编号。</param>
            <param name="eventHandler">有限状态机事件响应函数。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.UnsubscribeEvent(System.Int32,GameFramework.Fsm.FsmEventHandler{`0})">
            <summary>
            取消订阅有限状态机事件。
            </summary>
            <param name="eventId">事件编号。</param>
            <param name="eventHandler">有限状态机事件响应函数。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.ChangeState``1(GameFramework.Fsm.IFsm{`0})">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <typeparam name="TState">要切换到的有限状态机状态类型。</typeparam>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.ChangeState(GameFramework.Fsm.IFsm{`0},System.Type)">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="stateType">要切换到的有限状态机状态类型。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnEvent(GameFramework.Fsm.IFsm{`0},System.Object,System.Int32,System.Object)">
            <summary>
            响应有限状态机事件时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="sender">事件源。</param>
            <param name="eventId">事件编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Fsm.IFsm`1">
            <summary>
            有限状态机接口。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.Name">
            <summary>
            获取有限状态机名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.Owner">
            <summary>
            获取有限状态机持有者。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.FsmStateCount">
            <summary>
            获取有限状态机中状态的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.IsRunning">
            <summary>
            获取有限状态机是否正在运行。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.IsDestroyed">
            <summary>
            获取有限状态机是否被销毁。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.CurrentState">
            <summary>
            获取当前有限状态机状态。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.CurrentStateTime">
            <summary>
            获取当前有限状态机状态持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.Start``1">
            <summary>
            开始有限状态机。
            </summary>
            <typeparam name="TState">要开始的有限状态机状态类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.Start(System.Type)">
            <summary>
            开始有限状态机。
            </summary>
            <param name="stateType">要开始的有限状态机状态类型。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.HasState``1">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <typeparam name="TState">要检查的有限状态机状态类型。</typeparam>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.HasState(System.Type)">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <param name="stateType">要检查的有限状态机状态类型。</param>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetState``1">
            <summary>
            获取有限状态机状态。
            </summary>
            <typeparam name="TState">要获取的有限状态机状态类型。</typeparam>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetState(System.Type)">
            <summary>
            获取有限状态机状态。
            </summary>
            <param name="stateType">要获取的有限状态机状态类型。</param>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.FireEvent(System.Object,System.Int32)">
            <summary>
            抛出有限状态机事件。
            </summary>
            <param name="sender">事件源。</param>
            <param name="eventId">事件编号。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.FireEvent(System.Object,System.Int32,System.Object)">
            <summary>
            抛出有限状态机事件。
            </summary>
            <param name="sender">事件源。</param>
            <param name="eventId">事件编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.HasData(System.String)">
            <summary>
            是否存在有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>有限状态机数据是否存在。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetData(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetData``1(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <typeparam name="TData">要获取的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.SetData``1(System.String,``0)">
            <summary>
            设置有限状态机数据。
            </summary>
            <typeparam name="TData">要设置的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <param name="data">要设置的有限状态机数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.RemoveData(System.String)">
            <summary>
            移除有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>是否移除有限状态机数据成功。</returns>
        </member>
        <member name="T:GameFramework.Fsm.IFsmManager">
            <summary>
            有限状态机管理器。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsmManager.Count">
            <summary>
            获取有限状态机数量。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.HasFsm``1">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.HasFsm``1(System.String)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetFsm``1">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetFsm``1(System.String)">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetAllFsms">
            <summary>
            获取所有有限状态机。
            </summary>
            <returns>所有有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.CreateFsm``1(``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.CreateFsm``1(System.String,``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm``1">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm``1(System.String)">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">要销毁的有限状态机名称。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm``1(GameFramework.Fsm.IFsm{``0})">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="fsm">要销毁的有限状态机。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="T:GameFramework.Localization.ILocalizationHelper">
            <summary>
            本地化辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationHelper.SystemLanguage">
            <summary>
            获取系统语言。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationHelper.LoadDictionary(System.Object,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAsset">字典资源。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>加载是否成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationHelper.ParseDictionary(System.String,System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="text">要解析的字典文本。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationHelper.ReleaseDictionaryAsset(System.Object)">
            <summary>
            释放字典资源。
            </summary>
            <param name="dictionaryAsset">要释放的字典资源。</param>
        </member>
        <member name="T:GameFramework.Localization.ILocalizationManager">
            <summary>
            本地化管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationManager.Language">
            <summary>
            获取或设置本地化语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationManager.SystemLanguage">
            <summary>
            获取系统语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationManager.DictionaryCount">
            <summary>
            获取字典条数。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionarySuccess">
            <summary>
            加载字典成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionaryFailure">
            <summary>
            加载字典失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionaryUpdate">
            <summary>
            加载字典更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionaryDependencyAsset">
            <summary>
            加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.SetLocalizationHelper(GameFramework.Localization.ILocalizationHelper)">
            <summary>
            设置本地化辅助器。
            </summary>
            <param name="localizationHelper">本地化辅助器。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.LoadDictionary(System.String)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.LoadDictionary(System.String,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.ParseDictionary(System.String)">
            <summary>
            解析字典。
            </summary>
            <param name="text">要解析的字典文本。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.ParseDictionary(System.String,System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="text">要解析的字典文本。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetString(System.String,System.Object[])">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="args">字典参数。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.HasRawString(System.String)">
            <summary>
            是否存在字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否存在字典。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetRawString(System.String)">
            <summary>
            根据字典主键获取字典值。
            </summary>
            <param name="key">字典主键。</param>
            <returns>字典值。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.AddRawString(System.String,System.String)">
            <summary>
            增加字典。
            </summary>
            <param name="key">字典主键。</param>
            <param name="value">字典内容。</param>
            <returns>是否增加字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.RemoveRawString(System.String)">
            <summary>
            移除字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否移除字典成功。</returns>
        </member>
        <member name="T:GameFramework.Localization.Language">
            <summary>
            本地化语言。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Unspecified">
            <summary>
            未指定。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Afrikaans">
            <summary>
            南非荷兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Albanian">
            <summary>
            阿尔巴尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Arabic">
            <summary>
            阿拉伯语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Basque">
            <summary>
            巴斯克语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Belarusian">
            <summary>
            白俄罗斯语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Bulgarian">
            <summary>
            保加利亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Catalan">
            <summary>
            加泰罗尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.ChineseSimplified">
            <summary>
            简体中文。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.ChineseTraditional">
            <summary>
            繁体中文。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Croatian">
            <summary>
            克罗地亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Czech">
            <summary>
            捷克语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Danish">
            <summary>
            丹麦语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Dutch">
            <summary>
            荷兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.English">
            <summary>
            英语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Estonian">
            <summary>
            爱沙尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Faroese">
            <summary>
            法罗语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Finnish">
            <summary>
            芬兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.French">
            <summary>
            法语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Georgian">
            <summary>
            格鲁吉亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.German">
            <summary>
            德语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Greek">
            <summary>
            希腊语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Hebrew">
            <summary>
            希伯来语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Hungarian">
            <summary>
            匈牙利语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Icelandic">
            <summary>
            冰岛语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Indonesian">
            <summary>
            印尼语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Italian">
            <summary>
            意大利语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Japanese">
            <summary>
            日语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Korean">
            <summary>
            韩语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Latvian">
            <summary>
            拉脱维亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Lithuanian">
            <summary>
            立陶宛语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Macedonian">
            <summary>
            马其顿语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Malayalam">
            <summary>
            马拉雅拉姆语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Norwegian">
            <summary>
            挪威语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Persian">
            <summary>
            波斯语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Polish">
            <summary>
            波兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.PortugueseBrazil">
            <summary>
            巴西葡萄牙语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.PortuguesePortugal">
            <summary>
            葡萄牙语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Romanian">
            <summary>
            罗马尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Russian">
            <summary>
            俄语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.SerboCroatian">
            <summary>
            塞尔维亚克罗地亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.SerbianCyrillic">
            <summary>
            塞尔维亚西里尔语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.SerbianLatin">
            <summary>
            塞尔维亚拉丁语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Slovak">
            <summary>
            斯洛伐克语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Slovenian">
            <summary>
            斯洛文尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Spanish">
            <summary>
            西班牙语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Swedish">
            <summary>
            瑞典语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Thai">
            <summary>
            泰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Turkish">
            <summary>
            土耳其语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Ukrainian">
            <summary>
            乌克兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Vietnamese">
            <summary>
            越南语。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs">
            <summary>
            加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            初始化加载字典时加载依赖资源事件的新实例。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionaryFailureEventArgs">
            <summary>
            加载字典失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryFailureEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
            初始化加载字典失败事件的新实例。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryFailureEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionarySuccessEventArgs">
            <summary>
            加载字典成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionarySuccessEventArgs.#ctor(System.String,System.Single,System.Object)">
            <summary>
            初始化加载字典成功事件的新实例。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionarySuccessEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionarySuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionarySuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionaryUpdateEventArgs">
            <summary>
            加载字典更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryUpdateEventArgs.#ctor(System.String,System.Single,System.Object)">
            <summary>
            初始化加载字典更新事件的新实例。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="progress">加载字典进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryUpdateEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryUpdateEventArgs.Progress">
            <summary>
            获取加载字典进度。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LocalizationManager">
            <summary>
            本地化管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.#ctor">
            <summary>
            初始化本地化管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LocalizationManager.Language">
            <summary>
            获取或设置本地化语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LocalizationManager.SystemLanguage">
            <summary>
            获取系统语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LocalizationManager.DictionaryCount">
            <summary>
            获取字典条数。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionarySuccess">
            <summary>
            加载字典成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionaryFailure">
            <summary>
            加载字典失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionaryUpdate">
            <summary>
            加载字典更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionaryDependencyAsset">
            <summary>
            加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.Update(System.Single,System.Single)">
            <summary>
            本地化管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.Shutdown">
            <summary>
            关闭并清理本地化管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.SetLocalizationHelper(GameFramework.Localization.ILocalizationHelper)">
            <summary>
            设置本地化辅助器。
            </summary>
            <param name="localizationHelper">本地化辅助器。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.LoadDictionary(System.String)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.LoadDictionary(System.String,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.ParseDictionary(System.String)">
            <summary>
            解析字典。
            </summary>
            <param name="text">要解析的字典文本。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.ParseDictionary(System.String,System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="text">要解析的字典文本。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetString(System.String,System.Object[])">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="args">字典参数。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.HasRawString(System.String)">
            <summary>
            是否存在字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否存在字典。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetRawString(System.String)">
            <summary>
            根据字典主键获取字典值。
            </summary>
            <param name="key">字典主键。</param>
            <returns>字典值。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.AddRawString(System.String,System.String)">
            <summary>
            增加字典。
            </summary>
            <param name="key">字典主键。</param>
            <param name="value">字典内容。</param>
            <returns>是否增加字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.RemoveRawString(System.String)">
            <summary>
            移除字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否移除字典成功。</returns>
        </member>
        <member name="T:GameFramework.Network.INetworkChannel">
            <summary>
            网络频道接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.Name">
            <summary>
            获取网络频道名称。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.Connected">
            <summary>
            获取是否已连接。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.NetworkType">
            <summary>
            获取网络类型。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.LocalIPAddress">
            <summary>
            获取本地终结点的 IP 地址。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.LocalPort">
            <summary>
            获取本地终结点的端口号。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.RemoteIPAddress">
            <summary>
            获取远程终结点的 IP 地址。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.RemotePort">
            <summary>
            获取远程终结点的端口号。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.PacketHeaderLength">
            <summary>
            获取数据包头长度。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.MaxPacketLength">
            <summary>
            获取数据包最大字节数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.ResetHeartBeatElapseSecondsWhenReceivePacket">
            <summary>
            获取或设置当收到消息包时是否重置心跳流逝时间。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.HeartBeatInterval">
            <summary>
            获取或设置心跳间隔时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.ReceiveBufferSize">
            <summary>
            获取或设置接收缓冲区字节数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.SendBufferSize">
            <summary>
            获取或设置发送缓冲区字节数。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="packetHeaderLength">数据包头长度。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="packetHeaderLength">数据包头长度。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Close">
            <summary>
            关闭网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send(System.Byte[])">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send(System.Byte[],System.Object)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
            <param name="offset">要发送数据包的偏移。</param>
            <param name="size">要发送数据包的长度。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
            <param name="offset">要发送数据包的偏移。</param>
            <param name="size">要发送数据包的长度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send``1(``0)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <typeparam name="T">数据包类型。</typeparam>
            <param name="packet">要发送的数据包。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send``1(``0,System.Object)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <typeparam name="T">数据包类型。</typeparam>
            <param name="packet">要发送的数据包。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Network.INetworkHelper">
            <summary>
            网络辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkHelper.SendHeartBeat(GameFramework.Network.INetworkChannel)">
            <summary>
            发送心跳协议包。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <returns>是否发送心跳协议包成功。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkHelper.Serialize``1(GameFramework.Network.INetworkChannel,System.IO.Stream,``0)">
            <summary>
            序列化协议包。
            </summary>
            <typeparam name="T">协议包类型。</typeparam>
            <param name="networkChannel">网络频道。</param>
            <param name="destination">要序列化的目标流。</param>
            <param name="packet">要序列化的协议包。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkHelper.Deserialize(GameFramework.Network.INetworkChannel,System.IO.Stream,System.Object@)">
            <summary>
            反序列化协议包。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="source">要反序列化的来源流。</param>
            <param name="customErrorData">用户自定义错误数据。</param>
            <returns>反序列化后的协议包。</returns>
        </member>
        <member name="T:GameFramework.Network.INetworkManager">
            <summary>
            网络管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkManager.NetworkChannelCount">
            <summary>
            获取网络频道数量。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkConnected">
            <summary>
            网络连接成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkClosed">
            <summary>
            网络连接关闭事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkSendPacket">
            <summary>
            发送网络消息包事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkMissHeartBeat">
            <summary>
            网络心跳包丢失事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkError">
            <summary>
            网络错误事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkCustomError">
            <summary>
            用户自定义网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.SetNetworkHelper(GameFramework.Network.INetworkHelper)">
            <summary>
            设置网络辅助器。
            </summary>
            <param name="networkHelper">网络辅助器。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.HasNetworkChannel(System.String)">
            <summary>
            检查是否存在网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否存在网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.GetNetworkChannel(System.String)">
            <summary>
            获取网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>要获取的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.GetAllNetworkChannels">
            <summary>
            获取所有网络频道。
            </summary>
            <returns>所有网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.CreateNetworkChannel(System.String)">
            <summary>
            创建网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>要创建的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.DestroyNetworkChannel(System.String)">
            <summary>
            销毁网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否销毁网络频道成功。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.RegisterHandler(GameFramework.Network.IPacketHandler)">
            <summary>
            注册网络消息包处理函数。
            </summary>
            <param name="handler">要注册的网络消息包处理函数。</param>
        </member>
        <member name="T:GameFramework.Network.IPacketHandler">
            <summary>
            网络消息包处理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.IPacketHandler.Id">
            <summary>
            获取网络消息包协议编号。
            </summary>
        </member>
        <member name="M:GameFramework.Network.IPacketHandler.Handle(System.Object,GameFramework.Network.Packet)">
            <summary>
            网络消息包处理函数。
            </summary>
            <param name="sender">网络消息包源。</param>
            <param name="packet">网络消息包内容。</param>
        </member>
        <member name="T:GameFramework.Network.NetworkClosedEventArgs">
            <summary>
            网络连接关闭事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkClosedEventArgs.#ctor(GameFramework.Network.INetworkChannel)">
            <summary>
            初始化网络连接关闭事件的新实例。
            </summary>
            <param name="networkChannel">网络频道。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkClosedEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkConnectedEventArgs">
            <summary>
            网络连接成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkConnectedEventArgs.#ctor(GameFramework.Network.INetworkChannel,System.Object)">
            <summary>
            初始化网络连接成功事件的新实例。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkConnectedEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkConnectedEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkCustomErrorEventArgs">
            <summary>
            用户自定义网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkCustomErrorEventArgs.#ctor(GameFramework.Network.INetworkChannel,System.Object)">
            <summary>
            初始化用户自定义网络错误事件的新实例。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="customErrorData">用户自定义错误数据。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkCustomErrorEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkCustomErrorEventArgs.CustomErrorData">
            <summary>
            获取用户自定义错误数据。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkErrorCode">
            <summary>
            网络错误码。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.StatusError">
            <summary>
            状态错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.SerializeError">
            <summary>
            序列化错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.DeserializeError">
            <summary>
            反序列化错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.ConnectError">
            <summary>
            连接错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.SendError">
            <summary>
            发送错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.ReceiveError">
            <summary>
            接收错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.HeaderError">
            <summary>
            消息包头错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.OutOfRangeError">
            <summary>
            消息包长度错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.StreamError">
            <summary>
            消息包流错误。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkErrorEventArgs">
            <summary>
            网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkErrorEventArgs.#ctor(GameFramework.Network.INetworkChannel,GameFramework.Network.NetworkErrorCode,System.String)">
            <summary>
            初始化网络错误事件的新实例。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="errorCode">错误码。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.ErrorCode">
            <summary>
            获取错误码。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkManager">
            <summary>
            网络管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.#ctor">
            <summary>
            初始化网络管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelCount">
            <summary>
            获取网络频道数量。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkConnected">
            <summary>
            网络连接成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkClosed">
            <summary>
            网络连接关闭事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkSendPacket">
            <summary>
            发送网络消息包事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkMissHeartBeat">
            <summary>
            网络心跳包丢失事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkError">
            <summary>
            网络错误事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkCustomError">
            <summary>
            用户自定义网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.Update(System.Single,System.Single)">
            <summary>
            网络管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.Shutdown">
            <summary>
            关闭并清理网络管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.SetNetworkHelper(GameFramework.Network.INetworkHelper)">
            <summary>
            设置网络辅助器。
            </summary>
            <param name="networkHelper">网络辅助器。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.HasNetworkChannel(System.String)">
            <summary>
            检查是否存在网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否存在网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.GetNetworkChannel(System.String)">
            <summary>
            获取网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>要获取的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.GetAllNetworkChannels">
            <summary>
            获取所有网络频道。
            </summary>
            <returns>所有网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.CreateNetworkChannel(System.String)">
            <summary>
            创建网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>要创建的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.DestroyNetworkChannel(System.String)">
            <summary>
            销毁网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否销毁网络频道成功。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.RegisterHandler(GameFramework.Network.IPacketHandler)">
            <summary>
            注册网络消息包处理函数。
            </summary>
            <param name="handler">要注册的网络消息包处理函数。</param>
        </member>
        <member name="T:GameFramework.Network.NetworkManager.NetworkChannel">
            <summary>
            网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.#ctor(System.String,GameFramework.Network.INetworkHelper)">
            <summary>
            初始化网络频道的新实例。
            </summary>
            <param name="name">网络频道名称。</param>
            <param name="networkHelper">网络辅助器。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.Name">
            <summary>
            获取网络频道名称。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.Connected">
            <summary>
            获取是否已连接。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.NetworkType">
            <summary>
            获取网络类型。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.LocalIPAddress">
            <summary>
            获取本地终结点的 IP 地址。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.LocalPort">
            <summary>
            获取本地终结点的端口号。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.RemoteIPAddress">
            <summary>
            获取远程终结点的 IP 地址。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.RemotePort">
            <summary>
            获取远程终结点的端口号。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.PacketHeaderLength">
            <summary>
            获取数据包头长度。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.MaxPacketLength">
            <summary>
            获取数据包最大字节数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.ResetHeartBeatElapseSecondsWhenReceivePacket">
            <summary>
            获取或设置当收到消息包时是否重置心跳流逝时间。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.HeartBeatInterval">
            <summary>
            获取或设置心跳间隔时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.ReceiveBufferSize">
            <summary>
            获取或设置接收缓冲区字节数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannel.SendBufferSize">
            <summary>
            获取或设置发送缓冲区字节数。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Update(System.Single,System.Single)">
            <summary>
            网络频道轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="packetHeaderLength">数据包头长度。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="packetHeaderLength">数据包头长度。</param>
            <param name="maxPacketLength">数据包最大字节数。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Close">
            <summary>
            关闭连接并释放所有相关资源。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Send(System.Byte[])">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Send(System.Byte[],System.Object)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
            <param name="offset">要发送数据包的偏移。</param>
            <param name="size">要发送数据包的长度。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Send(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <param name="buffer">数据包流。</param>
            <param name="offset">要发送数据包的偏移。</param>
            <param name="size">要发送数据包的长度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Send``1(``0)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <typeparam name="T">数据包类型。</typeparam>
            <param name="packet">要发送的数据包。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Send``1(``0,System.Object)">
            <summary>
            向远程主机发送数据包。
            </summary>
            <typeparam name="T">数据包类型。</typeparam>
            <param name="packet">要发送的数据包。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannel.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing">释放资源标记。</param>
        </member>
        <member name="T:GameFramework.Network.NetworkMissHeartBeatEventArgs">
            <summary>
            网络心跳包丢失事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkMissHeartBeatEventArgs.#ctor(GameFramework.Network.INetworkChannel,System.Int32)">
            <summary>
            初始化网络心跳包丢失事件的新实例。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="missCount">心跳包已丢失次数。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkMissHeartBeatEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkMissHeartBeatEventArgs.MissCount">
            <summary>
            获取心跳包已丢失次数。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkSendPacketEventArgs">
            <summary>
            发送网络消息包事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkSendPacketEventArgs.#ctor(GameFramework.Network.INetworkChannel,System.Int32,System.Object)">
            <summary>
            初始化发送网络消息包事件的新实例。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="bytesSent">已发送字节数。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkSendPacketEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkSendPacketEventArgs.BytesSent">
            <summary>
            获取已发送字节数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkSendPacketEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkType">
            <summary>
            网络类型。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkType.Unknown">
            <summary>
            未知。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkType.IPv4">
            <summary>
            IP 版本 4。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkType.IPv6">
            <summary>
            IP 版本 6。
            </summary>
        </member>
        <member name="T:GameFramework.Network.Packet">
            <summary>
            网络消息包基类。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.IObjectPool`1">
            <summary>
            对象池接口。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Name">
            <summary>
            获取对象池名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Register(`0,System.Boolean)">
            <summary>
            创建对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.CanSpawn">
            <summary>
            检查对象。
            </summary>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.CanSpawn(System.String)">
            <summary>
            检查对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Spawn(System.String)">
            <summary>
            获取对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Unspawn(`0)">
            <summary>
            回收对象。
            </summary>
            <param name="obj">要回收的内部对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Unspawn(System.Object)">
            <summary>
            回收对象。
            </summary>
            <param name="target">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetLocked(`0,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="obj">要设置被加锁的内部对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetLocked(System.Object,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="target">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetPriority(`0,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="obj">要设置优先级的内部对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetPriority(System.Object,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="target">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(System.Int32,GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.IObjectPoolManager">
            <summary>
            对象池管理器。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPoolManager.Count">
            <summary>
            获取对象池数量。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool``1">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool``1(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool``1">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool``1(System.String)">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools">
            <summary>
            获取所有对象池。
            </summary>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Boolean)">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1(System.String)">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1(GameFramework.ObjectPool.IObjectPool{``0})">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectBase">
            <summary>
            对象基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.Object)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="target">对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="locked">对象是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="priority">对象的优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object,System.Boolean,System.Int32)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="locked">对象是否被加锁。</param>
            <param name="priority">对象的优先级。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Target">
            <summary>
            获取对象。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Locked">
            <summary>
            获取或设置对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Priority">
            <summary>
            获取或设置对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.OnSpawn">
            <summary>
            获取对象时的事件。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.OnUnspawn">
            <summary>
            回收对象时的事件。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Release">
            <summary>
            释放对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectInfo">
            <summary>
            对象信息。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectInfo.#ctor(System.String,System.Boolean,System.Int32,System.DateTime,System.Int32)">
            <summary>
            初始化对象信息的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="locked">对象是否被加锁。</param>
            <param name="priority">对象的优先级。</param>
            <param name="lastUseTime">对象上次使用时间。</param>
            <param name="spawnCount">对象的获取计数。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Locked">
            <summary>
            获取对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Priority">
            <summary>
            获取对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.IsInUse">
            <summary>
            获取对象是否正在使用。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.SpawnCount">
            <summary>
            获取对象的获取计数。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolBase">
            <summary>
            对象池基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.#ctor">
            <summary>
            初始化对象池基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.#ctor(System.String)">
            <summary>
            初始化对象池基类的新实例。
            </summary>
            <param name="name">对象池名称。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Name">
            <summary>
            获取对象池名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.GetAllObjectInfos">
            <summary>
            获取所有对象信息。
            </summary>
            <returns>所有对象信息。</returns>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager">
            <summary>
            对象池管理器。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.#ctor">
            <summary>
            初始化对象池管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Count">
            <summary>
            获取对象池数量。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Update(System.Single,System.Single)">
            <summary>
            对象池管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Shutdown">
            <summary>
            关闭并清理对象池管理器。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool``1">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool``1(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool``1">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool``1(System.String)">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools">
            <summary>
            获取所有对象池。
            </summary>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Boolean)">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1(System.String)">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1(GameFramework.ObjectPool.IObjectPool{``0})">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager.Object`1">
            <summary>
            内部对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.#ctor(`0,System.Boolean)">
            <summary>
            初始化内部对象的新实例。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Locked">
            <summary>
            获取对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Priority">
            <summary>
            获取对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.IsInUse">
            <summary>
            获取对象是否正在使用。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.SpawnCount">
            <summary>
            获取对象的获取计数。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Peek">
            <summary>
            查看对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Unspawn">
            <summary>
            回收对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Release">
            <summary>
            释放对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1">
            <summary>
            对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.#ctor(System.String,System.Boolean,System.Int32,System.Single,System.Int32)">
            <summary>
            初始化对象池的新实例。
            </summary>
            <param name="name">对象池名称。</param>
            <param name="allowMultiSpawn">是否允许对象被多次获取。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Register(`0,System.Boolean)">
            <summary>
            创建对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanSpawn">
            <summary>
            检查对象。
            </summary>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanSpawn(System.String)">
            <summary>
            检查对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Spawn(System.String)">
            <summary>
            获取对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Unspawn(`0)">
            <summary>
            回收对象。
            </summary>
            <param name="obj">要回收的内部对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Unspawn(System.Object)">
            <summary>
            回收对象。
            </summary>
            <param name="target">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetLocked(`0,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="obj">要设置被加锁的内部对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetLocked(System.Object,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="target">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetPriority(`0,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="obj">要设置优先级的内部对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetPriority(System.Object,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="target">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(System.Int32,GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.GetAllObjectInfos">
            <summary>
            获取所有对象信息。
            </summary>
            <returns>所有对象信息。</returns>
        </member>
        <member name="T:GameFramework.ObjectPool.ReleaseObjectFilterCallback`1">
            <summary>
            释放对象筛选函数。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="candidateObjects">要筛选的对象集合。</param>
            <param name="toReleaseCount">需要释放的对象数量。</param>
            <param name="expireTime">对象过期参考时间。</param>
            <returns>经筛选需要释放的对象集合。</returns>
        </member>
        <member name="T:GameFramework.Procedure.IProcedureManager">
            <summary>
            流程管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.IProcedureManager.CurrentProcedure">
            <summary>
            获取当前流程。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.IProcedureManager.CurrentProcedureTime">
            <summary>
            获取当前流程持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.Initialize(GameFramework.Fsm.IFsmManager,GameFramework.Procedure.ProcedureBase[])">
            <summary>
            初始化流程管理器。
            </summary>
            <param name="fsmManager">有限状态机管理器。</param>
            <param name="procedures">流程管理器包含的流程。</param>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.StartProcedure``1">
            <summary>
            开始流程。
            </summary>
            <typeparam name="T">要开始的流程类型。</typeparam>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.StartProcedure(System.Type)">
            <summary>
            开始流程。
            </summary>
            <param name="procedureType">要开始的流程类型。</param>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.HasProcedure``1">
            <summary>
            是否存在流程。
            </summary>
            <typeparam name="T">要检查的流程类型。</typeparam>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.HasProcedure(System.Type)">
            <summary>
            是否存在流程。
            </summary>
            <param name="procedureType">要检查的流程类型。</param>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.GetProcedure``1">
            <summary>
            获取流程。
            </summary>
            <typeparam name="T">要获取的流程类型。</typeparam>
            <returns>要获取的流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.GetProcedure(System.Type)">
            <summary>
            获取流程。
            </summary>
            <param name="procedureType">要获取的流程类型。</param>
            <returns>要获取的流程。</returns>
        </member>
        <member name="T:GameFramework.Procedure.ProcedureBase">
            <summary>
            流程基类。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnInit(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager})">
            <summary>
            状态初始化时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnEnter(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager})">
            <summary>
            进入状态时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnUpdate(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager},System.Single,System.Single)">
            <summary>
            状态轮询时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnLeave(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager},System.Boolean)">
            <summary>
            离开状态时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
            <param name="isShutdown">是否是关闭状态机时触发。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnDestroy(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager})">
            <summary>
            状态销毁时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
        </member>
        <member name="T:GameFramework.Procedure.ProcedureManager">
            <summary>
            流程管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.#ctor">
            <summary>
            初始化流程管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.ProcedureManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Procedure.ProcedureManager.CurrentProcedure">
            <summary>
            获取当前流程。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.ProcedureManager.CurrentProcedureTime">
            <summary>
            获取当前流程持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.Update(System.Single,System.Single)">
            <summary>
            流程管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.Shutdown">
            <summary>
            关闭并清理流程管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.Initialize(GameFramework.Fsm.IFsmManager,GameFramework.Procedure.ProcedureBase[])">
            <summary>
            初始化流程管理器。
            </summary>
            <param name="fsmManager">有限状态机管理器。</param>
            <param name="procedures">流程管理器包含的流程。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.StartProcedure``1">
            <summary>
            开始流程。
            </summary>
            <typeparam name="T">要开始的流程类型。</typeparam>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.StartProcedure(System.Type)">
            <summary>
            开始流程。
            </summary>
            <param name="procedureType">要开始的流程类型。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.HasProcedure``1">
            <summary>
            是否存在流程。
            </summary>
            <typeparam name="T">要检查的流程类型。</typeparam>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.HasProcedure(System.Type)">
            <summary>
            是否存在流程。
            </summary>
            <param name="procedureType">要检查的流程类型。</param>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.GetProcedure``1">
            <summary>
            获取流程。
            </summary>
            <typeparam name="T">要获取的流程类型。</typeparam>
            <returns>要获取的流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.GetProcedure(System.Type)">
            <summary>
            获取流程。
            </summary>
            <param name="procedureType">要获取的流程类型。</param>
            <returns>要获取的流程。</returns>
        </member>
        <member name="T:GameFramework.Resource.CheckVersionListResult">
            <summary>
            检查版本资源列表结果。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.CheckVersionListResult.Updated">
            <summary>
            已经是最新的。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.CheckVersionListResult.NeedUpdate">
            <summary>
            需要更新。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.DecryptResourceCallback">
            <summary>
            解密资源回调函数。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="bytes">待解密的资源二进制流。</param>
            <returns>解密后的资源二进制流。</returns>
        </member>
        <member name="T:GameFramework.Resource.ILoadResourceAgentHelper">
            <summary>
            加载资源代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperUpdate">
            <summary>
            加载资源代理辅助器异步加载资源更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperReadFileComplete">
            <summary>
            加载资源代理辅助器异步读取资源文件完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperReadBytesComplete">
            <summary>
            加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperParseBytesComplete">
            <summary>
            加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperLoadComplete">
            <summary>
            加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperError">
            <summary>
            加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ReadFile(System.String)">
            <summary>
            通过加载资源代理辅助器开始异步读取资源文件。
            </summary>
            <param name="fullPath">要加载资源的完整路径名。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ReadBytes(System.String,System.Int32)">
            <summary>
            通过加载资源代理辅助器开始异步读取资源二进制流。
            </summary>
            <param name="fullPath">要加载资源的完整路径名。</param>
            <param name="loadType">资源加载方式。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ParseBytes(System.Byte[])">
            <summary>
            通过加载资源代理辅助器开始异步将资源二进制流转换为加载对象。
            </summary>
            <param name="bytes">要加载资源的二进制流。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.LoadAsset(System.Object,System.String,System.Boolean)">
            <summary>
            通过加载资源代理辅助器开始异步加载资源。
            </summary>
            <param name="resource">资源。</param>
            <param name="resourceChildName">要加载的子资源名。</param>
            <param name="isScene">要加载的资源是否是场景。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.Reset">
            <summary>
            重置加载资源代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.IResourceHelper">
            <summary>
            资源辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.LoadBytes(System.String,GameFramework.Resource.LoadBytesCallback)">
            <summary>
            直接从指定文件路径读取数据流。
            </summary>
            <param name="fileUri">文件路径。</param>
            <param name="loadBytesCallback">读取数据流回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.Release(System.Object)">
            <summary>
            释放资源。
            </summary>
            <param name="objectToRelease">要释放的资源。</param>
        </member>
        <member name="T:GameFramework.Resource.IResourceManager">
            <summary>
            资源管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadOnlyPath">
            <summary>
            获取资源只读区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadWritePath">
            <summary>
            获取资源读写区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceMode">
            <summary>
            获取资源模式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.CurrentVariant">
            <summary>
            获取当前变体。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ApplicableGameVersion">
            <summary>
            获取当前资源适用的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.InternalResourceVersion">
            <summary>
            获取当前资源内部版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceGroupCount">
            <summary>
            获取资源组数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatePrefixUri">
            <summary>
            获取或设置资源更新下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadTotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadFreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadWorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadWaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceInitComplete">
            <summary>
            资源初始化完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.VersionListUpdateSuccess">
            <summary>
            版本资源列表更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.VersionListUpdateFailure">
            <summary>
            版本资源列表更新失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceCheckComplete">
            <summary>
            资源检查完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateStart">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateChanged">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateSuccess">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateFailure">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateAllComplete">
            <summary>
            资源更新全部完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetReadOnlyPath(System.String)">
            <summary>
            设置资源只读区路径。
            </summary>
            <param name="readOnlyPath">资源只读区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetReadWritePath(System.String)">
            <summary>
            设置资源读写区路径。
            </summary>
            <param name="readWritePath">资源读写区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetResourceMode(GameFramework.Resource.ResourceMode)">
            <summary>
            设置资源模式。
            </summary>
            <param name="resourceMode">资源模式。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetCurrentVariant(System.String)">
            <summary>
            设置当前变体。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetDecryptResourceCallback(GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            设置解密资源回调函数。
            </summary>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
            <remarks>如果不设置，将使用默认的解密资源回调函数。</remarks>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetResourceHelper(GameFramework.Resource.IResourceHelper)">
            <summary>
            设置资源辅助器。
            </summary>
            <param name="resourceHelper">资源辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.InitResources">
            <summary>
            使用单机模式并初始化资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.CheckVersionList(System.Int32)">
            <summary>
            使用可更新模式并检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的资源内部版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            使用可更新模式并更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.CheckResources">
            <summary>
            使用可更新模式并检查资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateResources">
            <summary>
            使用可更新模式并更新资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroupReady(System.String)">
            <summary>
            获取资源组是否准备完毕。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroupResourceCount(System.String)">
            <summary>
            获取资源组资源数量。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroupReadyResourceCount(System.String)">
            <summary>
            获取资源组已准备完成资源数量。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroupTotalLength(System.String)">
            <summary>
            获取资源组总大小。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroupTotalReadyLength(System.String)">
            <summary>
            获取资源组已准备完成总大小。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroupProgress(System.String)">
            <summary>
            获取资源组准备进度。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetCallbacks">
            <summary>
            加载资源回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetUpdateCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetUpdateCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetUpdateCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetSuccessCallback">
            <summary>
            获取加载资源成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetFailureCallback">
            <summary>
            获取加载资源失败回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetUpdateCallback">
            <summary>
            获取加载资源更新回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetDependencyAssetCallback">
            <summary>
            获取加载资源时加载依赖资源回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetDependencyAssetCallback">
            <summary>
            加载资源时加载依赖资源回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetFailureCallback">
            <summary>
            加载资源失败回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="status">加载资源状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetSuccessCallback">
            <summary>
            加载资源成功回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="asset">已加载的资源。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetUpdateCallback">
            <summary>
            加载资源更新回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="progress">加载资源进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadBytesCallback">
             <summary>
            读取数据流回调函数。
             </summary>
             <param name="fileUri">文件路径。</param>
             <param name="bytes">数据流。</param>
             <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs">
            <summary>
            加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.#ctor(GameFramework.Resource.LoadResourceStatus,System.String)">
            <summary>
            初始化加载资源代理辅助器错误事件的新实例。
            </summary>
            <param name="status">加载资源状态。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.Status">
            <summary>
            获取加载资源状态。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.#ctor(System.Object)">
            <summary>
            初始化加载资源代理辅助器异步加载资源完成事件的新实例。
            </summary>
            <param name="asset">加载的资源。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.Asset">
            <summary>
            获取加载的资源。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.#ctor(System.Object)">
            <summary>
            初始化加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件的新实例。
            </summary>
            <param name="resource">资源对象。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.Resource">
            <summary>
            获取加载对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            初始化加载资源代理辅助器异步读取资源二进制流完成事件的新实例。
            </summary>
            <param name="bytes">资源的二进制流。</param>
            <param name="loadType">资源加载方式。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.GetBytes">
            <summary>
            获取资源的二进制流。
            </summary>
            <returns>资源的二进制流。</returns>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步将资源文件转换为加载对象完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.#ctor(System.Object)">
            <summary>
            初始化加载资源代理辅助器异步将资源文件转换为加载对象完成事件的新实例。
            </summary>
            <param name="resource">资源对象。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.Resource">
            <summary>
            获取加载对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs">
            <summary>
            加载资源代理辅助器更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.#ctor(GameFramework.Resource.LoadResourceProgress,System.Single)">
            <summary>
            初始化加载资源代理辅助器更新事件的新实例。
            </summary>
            <param name="type">进度类型。</param>
            <param name="progress">进度。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Type">
            <summary>
            获取进度类型。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Progress">
            <summary>
            获取进度。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceProgress">
            <summary>
            加载资源进度类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.ReadBundle">
            <summary>
            读取资源包。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadBundle">
            <summary>
            加载资源包。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadAsset">
            <summary>
            加载资源。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadScene">
            <summary>
            加载场景。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceStatus">
            <summary>
            加载资源状态。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.Ok">
            <summary>
            加载资源完成。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.NotReady">
            <summary>
            资源尚未准备完毕。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.NotExist">
            <summary>
            资源不存在于磁盘上。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.DependencyError">
            <summary>
            依赖资源错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.TypeError">
            <summary>
            资源类型错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.ChildAssetError">
            <summary>
            加载子资源错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.SceneAssetError">
            <summary>
            加载场景资源错误。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneCallbacks">
            <summary>
            加载场景回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneUpdateCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneUpdateCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneUpdateCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneSuccessCallback">
            <summary>
            获取加载场景成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneFailureCallback">
            <summary>
            获取加载场景失败回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneUpdateCallback">
            <summary>
            获取加载场景更新回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneDependencyAssetCallback">
            <summary>
            获取加载场景时加载依赖资源回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneDependencyAssetCallback">
            <summary>
            加载场景时加载依赖资源回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneFailureCallback">
            <summary>
            加载场景失败回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="status">加载场景状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneSuccessCallback">
            <summary>
            加载场景成功回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneUpdateCallback">
            <summary>
            加载场景更新回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="progress">加载场景进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceCheckCompleteEventArgs">
            <summary>
            资源检查完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceCheckCompleteEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化资源检查完成事件的新实例。
            </summary>
            <param name="removedCount">已移除的资源数量。</param>
            <param name="updateCount">要更新的资源数量。</param>
            <param name="updateTotalLength">要更新的资源总大小。</param>
            <param name="updateTotalZipLength">要更新的压缩包总大小。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceCheckCompleteEventArgs.RemovedCount">
            <summary>
            获取已移除的资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceCheckCompleteEventArgs.UpdateCount">
            <summary>
            获取要更新的资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceCheckCompleteEventArgs.UpdateTotalLength">
            <summary>
            获取要更新的资源总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceCheckCompleteEventArgs.UpdateTotalZipLength">
            <summary>
            获取要更新的压缩包总大小。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceInitCompleteEventArgs">
            <summary>
            资源初始化完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceInitCompleteEventArgs.#ctor">
            <summary>
            初始化资源初始化完成事件的新实例。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager">
            <summary>
            资源管理器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.AssetDependencyInfo">
            <summary>
            资源依赖信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetDependencyInfo.#ctor(System.String,System.String[],System.String[])">
            <summary>
            初始化资源依赖信息的新实例。
            </summary>
            <param name="assetName">资源名称。</param>
            <param name="dependencyAssetNames">依赖资源名称。</param>
            <param name="scatteredDependencyAssetNames">依赖零散资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetDependencyInfo.AssetName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetDependencyInfo.GetDependencyAssetNames">
            <summary>
            获取依赖资源名称。
            </summary>
            <returns>依赖资源名称。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetDependencyInfo.GetScatteredDependencyAssetNames">
            <summary>
            获取依赖零散资源名称。
            </summary>
            <returns>依赖零散资源名称。</returns>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.AssetInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetInfo.#ctor(System.String,GameFramework.Resource.ResourceManager.ResourceName)">
            <summary>
            初始化资源信息的新实例。
            </summary>
            <param name="assetName">资源名称。</param>
            <param name="resourceName">所在资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetInfo.AssetName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetInfo.ResourceName">
            <summary>
            获取所在资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.#ctor">
            <summary>
            初始化资源管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadOnlyPath">
            <summary>
            获取资源只读区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadWritePath">
            <summary>
            获取资源读写区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceMode">
            <summary>
            获取资源模式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.CurrentVariant">
            <summary>
            获取当前变体。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ApplicableGameVersion">
            <summary>
            获取当前资源适用的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.InternalResourceVersion">
            <summary>
            获取当前资源内部版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroupCount">
            <summary>
            获取资源组数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatePrefixUri">
            <summary>
            获取或设置资源更新下载地址前缀。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadTotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadFreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadWorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadWaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceInitComplete">
            <summary>
            资源初始化完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.VersionListUpdateSuccess">
            <summary>
            版本资源列表更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.VersionListUpdateFailure">
            <summary>
            版本资源列表更新失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceCheckComplete">
            <summary>
            资源检查完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateStart">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateChanged">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateSuccess">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateFailure">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateAllComplete">
            <summary>
            资源更新全部完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.Update(System.Single,System.Single)">
            <summary>
            资源管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.Shutdown">
            <summary>
            关闭并清理资源管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetReadOnlyPath(System.String)">
            <summary>
            设置资源只读区路径。
            </summary>
            <param name="readOnlyPath">资源只读区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetReadWritePath(System.String)">
            <summary>
            设置资源读写区路径。
            </summary>
            <param name="readWritePath">资源读写区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetResourceMode(GameFramework.Resource.ResourceMode)">
            <summary>
            设置资源模式。
            </summary>
            <param name="resourceMode">资源模式。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetCurrentVariant(System.String)">
            <summary>
            设置当前变体。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetDecryptResourceCallback(GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            设置解密资源回调函数。
            </summary>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
            <remarks>如果不设置，将使用默认的解密资源回调函数。</remarks>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetResourceHelper(GameFramework.Resource.IResourceHelper)">
            <summary>
            设置资源辅助器。
            </summary>
            <param name="resourceHelper">资源辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.InitResources">
            <summary>
            使用单机模式并初始化资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.CheckVersionList(System.Int32)">
            <summary>
            使用可更新模式并检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的资源内部版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            使用可更新模式并更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.CheckResources">
            <summary>
            使用可更新模式并检查资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateResources">
            <summary>
            使用可更新模式并更新资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroupReady(System.String)">
            <summary>
            获取资源组是否准备完毕。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroupResourceCount(System.String)">
            <summary>
            获取资源组资源数量。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroupReadyResourceCount(System.String)">
            <summary>
            获取资源组已准备完成资源数量。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroupTotalLength(System.String)">
            <summary>
            获取资源组总大小。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroupTotalReadyLength(System.String)">
            <summary>
            获取资源组已准备完成总大小。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroupProgress(System.String)">
            <summary>
            获取资源组准备进度。
            </summary>
            <param name="resourceGroupName">要检查的资源组名称。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.LoadType">
            <summary>
            资源加载方式类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromFile">
            <summary>
            从文件加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemory">
            <summary>
            从内存加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemoryAndQuickDecrypt">
            <summary>
            从内存快速解密加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemoryAndDecrypt">
            <summary>
            从内存解密加载。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker">
            <summary>
            资源检查器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo">
            <summary>
            资源检查信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus">
            <summary>
            资源检查状态。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Unknown">
            <summary>
            状态未知。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.NeedUpdate">
            <summary>
            需要更新。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.StorageInReadOnly">
            <summary>
            存在最新且已存放于只读区中。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.StorageInReadWrite">
            <summary>
            存在最新且已存放于读写区中。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Unavailable">
            <summary>
            不适用于当前变体。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Disuse">
            <summary>
            已废弃。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName)">
            <summary>
            初始化资源检查信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ZipHashCode">
            <summary>
            获取压缩包哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.Status">
            <summary>
            获取资源检查状态。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.NeedRemove">
            <summary>
            获取资源是否可以从读写区移除。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetVersionInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置资源在版本中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="zipHashCode">压缩包哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetReadOnlyInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            设置资源在只读区中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetReadWriteInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            设置资源在读写区中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RefreshStatus(System.String)">
            <summary>
            刷新资源信息状态。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LocalVersionInfo">
            <summary>
            本地资源状态信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RemoteVersionInfo">
            <summary>
            远程资源状态信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源检查器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.Shutdown">
            <summary>
            关闭并清理资源检查器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.TryRecoverReadWriteList">
            <summary>
            尝试恢复读写区资源列表。
            </summary>
            <returns>是否恢复成功。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.ParseVersionList(System.String,System.Byte[],System.String)">
            <summary>
            解析版本资源列表。
            </summary>
            <param name="fileUri">版本资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.ParseReadOnlyList(System.String,System.Byte[],System.String)">
            <summary>
            解析只读区资源列表。
            </summary>
            <param name="fileUri">只读区资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.ParseReadWriteList(System.String,System.Byte[],System.String)">
            <summary>
            解析读写区资源列表。
            </summary>
            <param name="fileUri">读写区资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceGroup">
            <summary>
            资源组。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.#ctor(System.Collections.Generic.Dictionary{GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.ResourceInfo})">
            <summary>
            初始化资源组的新实例。
            </summary>
            <param name="resourceInfos">资源信息引用。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.Ready">
            <summary>
            获取资源组是否准备完毕。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.ResourceCount">
            <summary>
            获取资源组资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.ReadyResourceCount">
            <summary>
            获取资源组已准备完成资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.TotalLength">
            <summary>
            获取资源组总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.TotalReadyLength">
            <summary>
            获取资源组已准备完成总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.Progress">
            <summary>
            获取资源组准备进度。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.AddResource(System.String,System.String,System.Int32)">
            <summary>
            向资源组中增加资源。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
            <param name="length">资源大小。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            初始化资源信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.StorageInReadOnly">
            <summary>
            获取资源是否在只读区。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceIniter">
            <summary>
            资源初始化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源初始化器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.Shutdown">
            <summary>
            关闭并清理资源初始化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.InitResources(System.String)">
            <summary>
            初始化资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.ParsePackageList(System.String,System.Byte[],System.String)">
            <summary>
            解析资源包资源列表。
            </summary>
            <param name="fileUri">版本资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader">
            <summary>
            加载资源器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.AssetObject">
            <summary>
            资源对象。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化加载资源器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.TotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.FreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.WorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.WaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.Update(System.Single,System.Single)">
            <summary>
            加载资源器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.Shutdown">
            <summary>
            关闭并清理加载资源器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper,GameFramework.Resource.IResourceHelper,System.String,System.String,GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
            <param name="resourceHelper">资源辅助器。</param>
            <param name="readOnlyPath">资源只读区路径。</param>
            <param name="readWritePath">资源读写区路径。</param>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent">
            <summary>
            加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.#ctor(GameFramework.Resource.ILoadResourceAgentHelper,GameFramework.Resource.IResourceHelper,GameFramework.ObjectPool.IObjectPool{GameFramework.Resource.ResourceManager.ResourceLoader.AssetObject},GameFramework.ObjectPool.IObjectPool{GameFramework.Resource.ResourceManager.ResourceLoader.ResourceObject},GameFramework.Resource.ResourceManager.ResourceLoader,System.String,System.String,GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            初始化加载资源代理的新实例。
            </summary>
            <param name="loadResourceAgentHelper">加载资源代理辅助器。</param>
            <param name="resourceHelper">资源辅助器。</param>
            <param name="assetPool">资源对象池。</param>
            <param name="resourcePool">资源对象池。</param>
            <param name="resourceLoader">加载资源器。</param>
            <param name="readOnlyPath">资源只读区路径。</param>
            <param name="readWritePath">资源读写区路径。</param>
            <param name="decryptResourceCallback">解密资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Task">
            <summary>
            获取加载资源任务。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Initialize">
            <summary>
            初始化加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Update(System.Single,System.Single)">
            <summary>
            加载资源代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Shutdown">
            <summary>
            关闭并清理加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Start(GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceTaskBase)">
            <summary>
            开始处理加载资源任务。
            </summary>
            <param name="task">要处理的加载资源任务。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Reset">
            <summary>
            重置加载资源代理。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceObject">
            <summary>
            资源对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceName">
            <summary>
            资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceName.#ctor(System.String,System.String)">
            <summary>
            初始化资源名称的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Variant">
            <summary>
            获取变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.IsVariant">
            <summary>
            获取是否变体。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater">
            <summary>
            资源更新器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源更新器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.RetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateWaitingCount">
            <summary>
            获取等待更新队列大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdatingCount">
            <summary>
            获取正在更新队列大小。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.Update(System.Single,System.Single)">
            <summary>
            资源更新器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.Shutdown">
            <summary>
            关闭并清理资源更新器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.AddResourceUpdate(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            增加资源更新。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="zipHashCode">压缩包哈希值。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="retryCount">已重试次数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.CheckResourceComplete(System.Boolean)">
            <summary>
            检查资源完成。
            </summary>
            <param name="needGenerateReadWriteList">是否需要生成读写区资源列表。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateResources">
            <summary>
            更新资源。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo">
            <summary>
            更新信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            初始化更新信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="zipHashCode">压缩包哈希值。</param>
            <param name="downloadPath">资源更新下载后存放路径。</param>
            <param name="downloadUri">资源更新下载地址。</param>
            <param name="retryCount">已重试次数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ZipHashCode">
            <summary>
            获取压缩包哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.RetryCount">
            <summary>
            获取已重试次数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.VersionListProcessor">
            <summary>
            版本资源列表处理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化版本资源列表处理器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.Shutdown">
            <summary>
            关闭并清理版本资源列表处理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.CheckVersionList(System.Int32)">
            <summary>
            检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的资源内部版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceMode">
            <summary>
            资源模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Unspecified">
            <summary>
            未指定。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Package">
            <summary>
            单机模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Updatable">
            <summary>
            可更新模式。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateAllCompleteEventArgs">
            <summary>
            资源更新全部完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateAllCompleteEventArgs.#ctor">
            <summary>
            初始化资源更新全部完成事件的新实例。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateChangedEventArgs">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateChangedEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            初始化资源更新改变事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="currentLength">当前下载大小。</param>
            <param name="zipLength">压缩包大小。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.CurrentLength">
            <summary>
            获取当前下载大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateFailureEventArgs">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateFailureEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            初始化资源更新失败事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="retryCount">已重试次数。</param>
            <param name="totalRetryCount">设定的重试次数。</param>
            <param name="errorMessage">错误信息。</param>
            <remarks>当已重试次数达到设定的重试次数时，将不再重试。</remarks>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.RetryCount">
            <summary>
            获取已重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.TotalRetryCount">
            <summary>
            获取设定的重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateStartEventArgs">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateStartEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化资源更新开始事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="currentLength">当前下载大小。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="retryCount">已重试下载次数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.CurrentLength">
            <summary>
            获取当前下载大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.RetryCount">
            <summary>
            获取已重试下载次数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateSuccessEventArgs">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateSuccessEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            初始化资源更新成功事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="length">资源大小。</param>
            <param name="zipLength">压缩包大小。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneCallbacks">
            <summary>
            卸载场景回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UnloadSceneCallbacks.#ctor(GameFramework.Resource.UnloadSceneSuccessCallback)">
            <summary>
            初始化卸载场景回调函数集的新实例。
            </summary>
            <param name="unloadSceneSuccessCallback">卸载场景成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.UnloadSceneCallbacks.#ctor(GameFramework.Resource.UnloadSceneSuccessCallback,GameFramework.Resource.UnloadSceneFailureCallback)">
            <summary>
            初始化卸载场景回调函数集的新实例。
            </summary>
            <param name="unloadSceneSuccessCallback">卸载场景成功回调函数。</param>
            <param name="unloadSceneFailureCallback">卸载场景失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.UnloadSceneCallbacks.UnloadSceneSuccessCallback">
            <summary>
            获取卸载场景成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UnloadSceneCallbacks.UnloadSceneFailureCallback">
            <summary>
            获取卸载场景失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneFailureCallback">
            <summary>
            卸载场景失败回调函数。
            </summary>
            <param name="sceneAssetName">要卸载的场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneSuccessCallback">
            <summary>
            卸载场景成功回调函数。
            </summary>
            <param name="sceneAssetName">要卸载的场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.VersionListUpdateFailureEventArgs">
            <summary>
            版本资源列表更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.VersionListUpdateFailureEventArgs.#ctor(System.String,System.String)">
            <summary>
            初始化版本资源列表更新失败事件的新实例。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.Resource.VersionListUpdateFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.VersionListUpdateFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.VersionListUpdateSuccessEventArgs">
            <summary>
            版本资源列表更新成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.VersionListUpdateSuccessEventArgs.#ctor(System.String,System.String)">
            <summary>
            初始化版本资源列表更新成功事件的新实例。
            </summary>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
        </member>
        <member name="P:GameFramework.Resource.VersionListUpdateSuccessEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.VersionListUpdateSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.ISceneManager">
            <summary>
            场景管理器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneSuccess">
            <summary>
            加载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneFailure">
            <summary>
            加载场景失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneUpdate">
            <summary>
            加载场景更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneDependencyAsset">
            <summary>
            加载场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.UnloadSceneSuccess">
            <summary>
            卸载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.UnloadSceneFailure">
            <summary>
            卸载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SceneIsLoaded(System.String)">
            <summary>
            获取场景是否已加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否已加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetLoadedSceneAssetNames">
            <summary>
            获取已加载场景的资源名称。
            </summary>
            <returns>已加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SceneIsLoading(System.String)">
            <summary>
            获取场景是否正在加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetLoadingSceneAssetNames">
            <summary>
            获取正在加载场景的资源名称。
            </summary>
            <returns>正在加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SceneIsUnloading(System.String)">
            <summary>
            获取场景是否正在卸载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在卸载。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetUnloadingSceneAssetNames">
            <summary>
            获取正在卸载场景的资源名称。
            </summary>
            <returns>正在卸载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.LoadScene(System.String)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.LoadScene(System.String,System.Object)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.UnloadScene(System.String)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.UnloadScene(System.String,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneDependencyAssetEventArgs">
            <summary>
            加载场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            初始化加载场景时加载依赖资源事件的新实例。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneFailureEventArgs">
            <summary>
            加载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneFailureEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
            初始化加载场景失败事件的新实例。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneFailureEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneSuccessEventArgs">
            <summary>
            加载场景成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneSuccessEventArgs.#ctor(System.String,System.Single,System.Object)">
            <summary>
            初始化加载场景成功事件的新实例。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneSuccessEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneUpdateEventArgs">
            <summary>
            加载场景更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneUpdateEventArgs.#ctor(System.String,System.Single,System.Object)">
            <summary>
            初始化加载场景更新事件的新实例。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="progress">加载场景进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneUpdateEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneUpdateEventArgs.Progress">
            <summary>
            获取加载场景进度。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.SceneManager">
            <summary>
            场景管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.#ctor">
            <summary>
            初始化场景管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.SceneManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneSuccess">
            <summary>
            加载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneFailure">
            <summary>
            加载场景失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneUpdate">
            <summary>
            加载场景更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneDependencyAsset">
            <summary>
            加载场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.UnloadSceneSuccess">
            <summary>
            卸载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.UnloadSceneFailure">
            <summary>
            卸载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.Update(System.Single,System.Single)">
            <summary>
            场景管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.Shutdown">
            <summary>
            关闭并清理场景管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SceneIsLoaded(System.String)">
            <summary>
            获取场景是否已加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否已加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetLoadedSceneAssetNames">
            <summary>
            获取已加载场景的资源名称。
            </summary>
            <returns>已加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SceneIsLoading(System.String)">
            <summary>
            获取场景是否正在加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetLoadingSceneAssetNames">
            <summary>
            获取正在加载场景的资源名称。
            </summary>
            <returns>正在加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SceneIsUnloading(System.String)">
            <summary>
            获取场景是否正在卸载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在卸载。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetUnloadingSceneAssetNames">
            <summary>
            获取正在卸载场景的资源名称。
            </summary>
            <returns>正在卸载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.LoadScene(System.String)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.LoadScene(System.String,System.Object)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.UnloadScene(System.String)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.UnloadScene(System.String,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Scene.UnloadSceneFailureEventArgs">
            <summary>
            卸载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneFailureEventArgs.#ctor(System.String,System.Object)">
            <summary>
            初始化卸载场景失败事件的新实例。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneFailureEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.UnloadSceneSuccessEventArgs">
            <summary>
            卸载场景成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneSuccessEventArgs.#ctor(System.String,System.Object)">
            <summary>
            初始化卸载场景成功事件的新实例。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneSuccessEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Setting.ISettingHelper">
            <summary>
            配置管理器辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.Save">
            <summary>
            保存配置。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.HasKey(System.String)">
            <summary>
            检查是否存在指定配置项。
            </summary>
            <param name="key">要检查配置项的名称。</param>
            <returns>指定的配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.RemoveKey(System.String)">
            <summary>
            移除指定配置项。
            </summary>
            <param name="key">要移除配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.RemoveAllKeys">
            <summary>
            清空所有配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetBool(System.String)">
            <summary>
            从指定配置项中读取布尔值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetBool(System.String,System.Boolean)">
            <summary>
            从指定配置项中读取布尔值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetBool(System.String,System.Boolean)">
            <summary>
            向指定配置项写入布尔值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的布尔值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetInt(System.String)">
            <summary>
            从指定配置项中读取整数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetInt(System.String,System.Int32)">
            <summary>
            从指定配置项中读取整数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetInt(System.String,System.Int32)">
            <summary>
            向指定配置项写入整数值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的整数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetFloat(System.String)">
            <summary>
            从指定配置项中读取浮点数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetFloat(System.String,System.Single)">
            <summary>
            从指定配置项中读取浮点数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetFloat(System.String,System.Single)">
            <summary>
            向指定配置项写入浮点数值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的浮点数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetString(System.String)">
            <summary>
            从指定配置项中读取字符串值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetString(System.String,System.String)">
            <summary>
            从指定配置项中读取字符串值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetString(System.String,System.String)">
            <summary>
            向指定配置项写入字符串值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的字符串值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetObject``1(System.String)">
            <summary>
            从指定配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetObject``1(System.String,``0)">
            <summary>
            从指定配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultObj">当指定的配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetObject``1(System.String,``0)">
            <summary>
            向指定配置项写入对象。
            </summary>
            <typeparam name="T">要写入对象的类型。</typeparam>
            <param name="key">要写入配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="T:GameFramework.Setting.ISettingManager">
            <summary>
            配置管理器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetSettingHelper(GameFramework.Setting.ISettingHelper)">
            <summary>
            设置配置管理器辅助器。
            </summary>
            <param name="settingHelper">配置管理器辅助器。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.Save">
            <summary>
            保存配置。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.HasKey(System.String)">
            <summary>
            检查是否存在指定配置项。
            </summary>
            <param name="key">要检查配置项的名称。</param>
            <returns>指定的配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.RemoveKey(System.String)">
            <summary>
            移除指定配置项。
            </summary>
            <param name="key">要移除配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.RemoveAllKeys">
            <summary>
            清空所有配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetBool(System.String)">
            <summary>
            从指定配置项中读取布尔值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetBool(System.String,System.Boolean)">
            <summary>
            从指定配置项中读取布尔值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetBool(System.String,System.Boolean)">
            <summary>
            向指定配置项写入布尔值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的布尔值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetInt(System.String)">
            <summary>
            从指定配置项中读取整数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetInt(System.String,System.Int32)">
            <summary>
            从指定配置项中读取整数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetInt(System.String,System.Int32)">
            <summary>
            向指定配置项写入整数值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的整数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetFloat(System.String)">
            <summary>
            从指定配置项中读取浮点数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetFloat(System.String,System.Single)">
            <summary>
            从指定配置项中读取浮点数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetFloat(System.String,System.Single)">
            <summary>
            向指定配置项写入浮点数值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的浮点数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetString(System.String)">
            <summary>
            从指定配置项中读取字符串值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetString(System.String,System.String)">
            <summary>
            从指定配置项中读取字符串值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetString(System.String,System.String)">
            <summary>
            向指定配置项写入字符串值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的字符串值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetObject``1(System.String)">
            <summary>
            从指定配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetObject``1(System.String,``0)">
            <summary>
            从指定配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultObj">当指定的配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetObject``1(System.String,``0)">
            <summary>
            向指定配置项写入对象。
            </summary>
            <typeparam name="T">要写入对象的类型。</typeparam>
            <param name="key">要写入配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="T:GameFramework.Setting.SettingManager">
            <summary>
            配置管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.#ctor">
            <summary>
            初始化配置管理器的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Update(System.Single,System.Single)">
            <summary>
            配置管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Shutdown">
            <summary>
            关闭并清理配置管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetSettingHelper(GameFramework.Setting.ISettingHelper)">
            <summary>
            设置配置管理器辅助器。
            </summary>
            <param name="settingHelper">配置管理器辅助器。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Save">
            <summary>
            保存配置。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.HasKey(System.String)">
            <summary>
            检查是否存在指定配置项。
            </summary>
            <param name="key">要检查配置项的名称。</param>
            <returns>指定的配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.RemoveKey(System.String)">
            <summary>
            移除指定配置项。
            </summary>
            <param name="key">要移除配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.RemoveAllKeys">
            <summary>
            清空所有配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetBool(System.String)">
            <summary>
            从指定配置项中读取布尔值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetBool(System.String,System.Boolean)">
            <summary>
            从指定配置项中读取布尔值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetBool(System.String,System.Boolean)">
            <summary>
            向指定配置项写入布尔值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的布尔值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetInt(System.String)">
            <summary>
            从指定配置项中读取整数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetInt(System.String,System.Int32)">
            <summary>
            从指定配置项中读取整数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetInt(System.String,System.Int32)">
            <summary>
            向指定配置项写入整数值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的整数值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetFloat(System.String)">
            <summary>
            从指定配置项中读取浮点数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetFloat(System.String,System.Single)">
            <summary>
            从指定配置项中读取浮点数值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetFloat(System.String,System.Single)">
            <summary>
            向指定配置项写入浮点数值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的浮点数值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetString(System.String)">
            <summary>
            从指定配置项中读取字符串值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetString(System.String,System.String)">
            <summary>
            从指定配置项中读取字符串值。
            </summary>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultValue">当指定的配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetString(System.String,System.String)">
            <summary>
            向指定配置项写入字符串值。
            </summary>
            <param name="key">要写入配置项的名称。</param>
            <param name="value">要写入的字符串值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetObject``1(System.String)">
            <summary>
            从指定配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="key">要获取配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetObject``1(System.String,``0)">
            <summary>
            从指定配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="key">要获取配置项的名称。</param>
            <param name="defaultObj">当指定的配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetObject``1(System.String,``0)">
            <summary>
            向指定配置项写入对象。
            </summary>
            <typeparam name="T">要写入对象的类型。</typeparam>
            <param name="key">要写入配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="T:GameFramework.Sound.Constant">
            <summary>
            声音相关常量。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ISoundAgent">
            <summary>
            声音代理接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.SoundGroup">
            <summary>
            获取所在的声音组。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.IsPlaying">
            <summary>
            获取当前是否正在播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Mute">
            <summary>
            获取或设置是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.MuteInSoundGroup">
            <summary>
            获取或设置在声音组内是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Volume">
            <summary>
            获取音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.VolumeInSoundGroup">
            <summary>
            获取或设置在声音组内音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Helper">
            <summary>
            获取声音代理辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Play">
            <summary>
            播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Play(System.Single)">
            <summary>
            播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Stop">
            <summary>
            停止播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Stop(System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Pause">
            <summary>
            暂停播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Pause(System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Resume">
            <summary>
            恢复播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Resume(System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Reset">
            <summary>
            重置声音代理。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ISoundAgentHelper">
            <summary>
            声音代理辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.IsPlaying">
            <summary>
            获取当前是否正在播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Mute">
            <summary>
            获取或设置是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Volume">
            <summary>
            获取或设置音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundAgentHelper.ResetSoundAgent">
            <summary>
            重置声音代理事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Play(System.Single)">
            <summary>
            播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Stop(System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Pause(System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Resume(System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Reset">
            <summary>
            重置声音代理辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.SetSoundAsset(System.Object)">
            <summary>
            设置声音资源。
            </summary>
            <param name="soundAsset">声音资源。</param>
            <returns>设置声音资源是否成功。</returns>
        </member>
        <member name="T:GameFramework.Sound.ISoundGroup">
            <summary>
            声音组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Name">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.SoundAgentCount">
            <summary>
            获取声音代理数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.AvoidBeingReplacedBySamePriority">
            <summary>
            获取或设置声音组中的声音是否避免被同优先级声音替换。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Mute">
            <summary>
            获取或设置声音组静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Volume">
            <summary>
            获取或设置声音组音量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Helper">
            <summary>
            获取声音组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundGroup.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundGroup.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Sound.ISoundGroupHelper">
            <summary>
            声音组辅助器接口。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ISoundHelper">
            <summary>
            声音辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundHelper.ReleaseSoundAsset(System.Object)">
            <summary>
            释放声音资源。
            </summary>
            <param name="soundAsset">要释放的声音资源。</param>
        </member>
        <member name="T:GameFramework.Sound.ISoundManager">
            <summary>
            声音管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundManager.SoundGroupCount">
            <summary>
            获取声音组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundSuccess">
            <summary>
            播放声音成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundFailure">
            <summary>
            播放声音失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundUpdate">
            <summary>
            播放声音更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundDependencyAsset">
            <summary>
            播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.SetSoundHelper(GameFramework.Sound.ISoundHelper)">
            <summary>
            设置声音辅助器。
            </summary>
            <param name="soundHelper">声音辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.HasSoundGroup(System.String)">
            <summary>
            是否存在指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>指定声音组是否存在。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetSoundGroup(System.String)">
            <summary>
            获取指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>要获取的声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetAllSoundGroups">
            <summary>
            获取所有声音组。
            </summary>
            <returns>所有声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.AddSoundGroup(System.String,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.AddSoundGroup(System.String,System.Boolean,System.Boolean,System.Single,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupAvoidBeingReplacedBySamePriority">声音组中的声音是否避免被同优先级声音替换。</param>
            <param name="soundGroupMute">声音组是否静音。</param>
            <param name="soundGroupVolume">声音组音量。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.AddSoundAgentHelper(System.String,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            增加声音代理辅助器。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundAgentHelper">要增加的声音代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetAllLoadingSoundSerialIds">
            <summary>
            获取所有正在加载声音的序列编号。
            </summary>
            <returns>所有正在加载声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.IsLoadingSound(System.Int32)">
            <summary>
            是否正在加载声音。
            </summary>
            <param name="serialId">声音序列编号。</param>
            <returns>是否正在加载声音。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopSound(System.Int32)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopSound(System.Int32,System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopAllLoadingSounds">
            <summary>
            停止所有正在加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PauseSound(System.Int32)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PauseSound(System.Int32,System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.ResumeSound(System.Int32)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.ResumeSound(System.Int32,System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundDependencyAssetEventArgs">
            <summary>
            播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.#ctor(System.Int32,System.String,System.String,GameFramework.Sound.PlaySoundParams,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            初始化播放声音时加载依赖资源事件的新实例。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.SoundGroupName">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.PlaySoundParams">
            <summary>
            获取播放声音参数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundErrorCode">
            <summary>
            播放声音错误码。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.SoundGroupNotExist">
            <summary>
            声音组不存在。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.SoundGroupHasNoAgent">
            <summary>
            声音组没有声音代理。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.LoadAssetFailure">
            <summary>
            加载资源失败。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.IgnoredDueToLowPriority">
            <summary>
            播放声音因优先级低被忽略。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.SetSoundAssetFailure">
            <summary>
            设置声音资源失败。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundFailureEventArgs">
            <summary>
            播放声音失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundFailureEventArgs.#ctor(System.Int32,System.String,System.String,GameFramework.Sound.PlaySoundParams,GameFramework.Sound.PlaySoundErrorCode,System.String,System.Object)">
            <summary>
            初始化播放声音失败事件的新实例。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="errorCode">错误码。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.SoundGroupName">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.PlaySoundParams">
            <summary>
            获取播放声音参数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.ErrorCode">
            <summary>
            获取错误码。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundParams">
            <summary>
            播放声音参数。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundParams.#ctor">
            <summary>
            初始化播放声音参数的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.MuteInSoundGroup">
            <summary>
            获取或设置在声音组内是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.VolumeInSoundGroup">
            <summary>
            获取或设置在声音组内音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.FadeInSeconds">
            <summary>
            获取或设置声音淡入时间，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundSuccessEventArgs">
            <summary>
            播放声音成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundSuccessEventArgs.#ctor(System.Int32,System.String,GameFramework.Sound.ISoundAgent,System.Single,System.Object)">
            <summary>
            初始化播放声音成功事件的新实例。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundAgent">用于播放的声音代理。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.SoundAgent">
            <summary>
            获取用于播放的声音代理。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundUpdateEventArgs">
            <summary>
            播放声音更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundUpdateEventArgs.#ctor(System.Int32,System.String,System.String,GameFramework.Sound.PlaySoundParams,System.Single,System.Object)">
            <summary>
            初始化播放声音更新事件的新实例。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="progress">加载声音进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.SoundGroupName">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.PlaySoundParams">
            <summary>
            获取播放声音参数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.Progress">
            <summary>
            获取加载声音进度。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ResetSoundAgentEventArgs">
            <summary>
            重置声音代理事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ResetSoundAgentEventArgs.#ctor">
            <summary>
            初始化重置声音代理事件的新实例。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.SoundManager">
            <summary>
            声音管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.#ctor">
            <summary>
            初始化声音管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroupCount">
            <summary>
            获取声音组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundSuccess">
            <summary>
            播放声音成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundFailure">
            <summary>
            播放声音失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundUpdate">
            <summary>
            播放声音更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundDependencyAsset">
            <summary>
            播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.Update(System.Single,System.Single)">
            <summary>
            声音管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.Shutdown">
            <summary>
            关闭并清理声音管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SetSoundHelper(GameFramework.Sound.ISoundHelper)">
            <summary>
            设置声音辅助器。
            </summary>
            <param name="soundHelper">声音辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.HasSoundGroup(System.String)">
            <summary>
            是否存在指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>指定声音组是否存在。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetSoundGroup(System.String)">
            <summary>
            获取指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>要获取的声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetAllSoundGroups">
            <summary>
            获取所有声音组。
            </summary>
            <returns>所有声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.AddSoundGroup(System.String,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.AddSoundGroup(System.String,System.Boolean,System.Boolean,System.Single,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupAvoidBeingReplacedBySamePriority">声音组中的声音是否避免被同优先级声音替换。</param>
            <param name="soundGroupMute">声音组是否静音。</param>
            <param name="soundGroupVolume">声音组音量。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.AddSoundAgentHelper(System.String,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            增加声音代理辅助器。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundAgentHelper">要增加的声音代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetAllLoadingSoundSerialIds">
            <summary>
            获取所有正在加载声音的序列编号。
            </summary>
            <returns>所有正在加载声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.IsLoadingSound(System.Int32)">
            <summary>
            是否正在加载声音。
            </summary>
            <param name="serialId">声音序列编号。</param>
            <returns>是否正在加载声音。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopSound(System.Int32)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopSound(System.Int32,System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopAllLoadingSounds">
            <summary>
            停止所有正在加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PauseSound(System.Int32)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PauseSound(System.Int32,System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.ResumeSound(System.Int32)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.ResumeSound(System.Int32,System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Sound.SoundManager.SoundAgent">
            <summary>
            声音代理。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.#ctor(GameFramework.Sound.SoundManager.SoundGroup,GameFramework.Sound.ISoundHelper,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            初始化声音代理的新实例。
            </summary>
            <param name="soundGroup">所在的声音组。</param>
            <param name="soundHelper">声音辅助器接口。</param>
            <param name="soundAgentHelper">声音代理辅助器接口。</param>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SoundGroup">
            <summary>
            获取所在的声音组。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SerialId">
            <summary>
            获取或设置声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.IsPlaying">
            <summary>
            获取当前是否正在播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Mute">
            <summary>
            获取是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.MuteInSoundGroup">
            <summary>
            获取或设置在声音组内是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Volume">
            <summary>
            获取音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.VolumeInSoundGroup">
            <summary>
            获取或设置在声音组内音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Helper">
            <summary>
            获取声音代理辅助器。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SetSoundAssetTime">
            <summary>
            获取声音创建时间。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Play">
            <summary>
            播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Play(System.Single)">
            <summary>
            播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Stop">
            <summary>
            停止播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Stop(System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Pause">
            <summary>
            暂停播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Pause(System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Resume">
            <summary>
            恢复播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Resume(System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Reset">
            <summary>
            重置声音代理。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.SoundManager.SoundGroup">
            <summary>
            声音组。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.#ctor(System.String,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            初始化声音组的新实例。
            </summary>
            <param name="name">声音组名称。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Name">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.SoundAgentCount">
            <summary>
            获取声音代理数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.AvoidBeingReplacedBySamePriority">
            <summary>
            获取或设置声音组中的声音是否避免被同优先级声音替换。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Mute">
            <summary>
            获取或设置声音组静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Volume">
            <summary>
            获取或设置声音组音量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Helper">
            <summary>
            获取声音组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.AddSoundAgentHelper(GameFramework.Sound.ISoundHelper,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            增加声音代理辅助器。
            </summary>
            <param name="soundHelper">声音辅助器接口。</param>
            <param name="soundAgentHelper">要增加的声音代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.PlaySound(System.Int32,System.Object,GameFramework.Sound.PlaySoundParams,System.Nullable{GameFramework.Sound.PlaySoundErrorCode}@)">
            <summary>
            播放声音。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAsset">声音资源。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="errorCode">错误码。</param>
            <returns>用于播放的声音代理。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.StopSound(System.Int32,System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
            <returns>是否停止播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.PauseSound(System.Int32,System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
            <returns>是否暂停播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.ResumeSound(System.Int32,System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
            <returns>是否恢复播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.UI.CloseUIFormCompleteEventArgs">
            <summary>
            关闭界面完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.CloseUIFormCompleteEventArgs.#ctor(System.Int32,System.String,GameFramework.UI.IUIGroup,System.Object)">
            <summary>
            初始化关闭界面完成事件的新实例。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroup">界面所属的界面组。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.UIGroup">
            <summary>
            获取界面所属的界面组。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.UI.IUIForm">
            <summary>
            界面接口。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.Handle">
            <summary>
            获取界面实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.UIGroup">
            <summary>
            获取界面所属的界面组。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.DepthInUIGroup">
            <summary>
            获取界面在界面组中的深度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnInit(System.Int32,System.String,GameFramework.UI.IUIGroup,System.Boolean,System.Boolean,System.Object)">
            <summary>
            初始化界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroup">界面所属的界面组。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="isNewInstance">是否是新实例。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnRecycle">
            <summary>
            界面回收。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnOpen(System.Object)">
            <summary>
            界面打开。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnClose(System.Object)">
            <summary>
            界面关闭。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnPause">
            <summary>
            界面暂停。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnResume">
            <summary>
            界面暂停恢复。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnCover">
            <summary>
            界面遮挡。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnReveal">
            <summary>
            界面遮挡恢复。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnRefocus(System.Object)">
            <summary>
            界面激活。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnUpdate(System.Single,System.Single)">
            <summary>
            界面轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnDepthChanged(System.Int32,System.Int32)">
            <summary>
            界面深度改变。
            </summary>
            <param name="uiGroupDepth">界面组深度。</param>
            <param name="depthInUIGroup">界面在界面组中的深度。</param>
        </member>
        <member name="T:GameFramework.UI.IUIFormHelper">
            <summary>
            界面辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIFormHelper.InstantiateUIForm(System.Object)">
            <summary>
            实例化界面。
            </summary>
            <param name="uiFormAsset">要实例化的界面资源。</param>
            <returns>实例化后的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIFormHelper.CreateUIForm(System.Object,GameFramework.UI.IUIGroup,System.Object)">
            <summary>
            创建界面。
            </summary>
            <param name="uiFormInstance">界面实例。</param>
            <param name="uiGroup">界面所属的界面组。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIFormHelper.ReleaseUIForm(System.Object,System.Object)">
            <summary>
            释放界面。
            </summary>
            <param name="uiFormAsset">要释放的界面资源。</param>
            <param name="uiFormInstance">要释放的界面实例。</param>
        </member>
        <member name="T:GameFramework.UI.IUIGroup">
            <summary>
            界面组接口。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Name">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Depth">
            <summary>
            获取或设置界面组深度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.UIFormCount">
            <summary>
            获取界面组中界面数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.CurrentUIForm">
            <summary>
            获取当前界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Helper">
            <summary>
            获取界面组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.HasUIForm(System.Int32)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.HasUIForm(System.String)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForm(System.Int32)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForm(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForms(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetAllUIForms">
            <summary>
            从界面组中获取所有界面。
            </summary>
            <returns>界面组中的所有界面。</returns>
        </member>
        <member name="T:GameFramework.UI.IUIGroupHelper">
            <summary>
            界面组辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIGroupHelper.SetDepth(System.Int32)">
            <summary>
            设置界面组深度。
            </summary>
            <param name="depth">界面组深度。</param>
        </member>
        <member name="T:GameFramework.UI.IUIManager">
            <summary>
            界面管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.UIGroupCount">
            <summary>
            获取界面组数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstanceAutoReleaseInterval">
            <summary>
            获取或设置界面实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstanceCapacity">
            <summary>
            获取或设置界面实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstanceExpireTime">
            <summary>
            获取或设置界面实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstancePriority">
            <summary>
            获取或设置界面实例对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormSuccess">
            <summary>
            打开界面成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormFailure">
            <summary>
            打开界面失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormUpdate">
            <summary>
            打开界面更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormDependencyAsset">
            <summary>
            打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.CloseUIFormComplete">
            <summary>
            关闭界面完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetUIFormHelper(GameFramework.UI.IUIFormHelper)">
            <summary>
            设置界面辅助器。
            </summary>
            <param name="uiFormHelper">界面辅助器。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.HasUIGroup(System.String)">
            <summary>
            是否存在界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>是否存在界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIGroup(System.String)">
            <summary>
            获取界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>要获取的界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllUIGroups">
            <summary>
            获取所有界面组。
            </summary>
            <returns>所有界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.AddUIGroup(System.String,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.AddUIGroup(System.String,System.Int32,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupDepth">界面组深度。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.HasUIForm(System.Int32)">
            <summary>
            是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.HasUIForm(System.String)">
            <summary>
            是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForm(System.Int32)">
            <summary>
            获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForm(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForms(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllLoadedUIForms">
            <summary>
            获取所有已加载的界面。
            </summary>
            <returns>所有已加载的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllLoadingUIFormSerialIds">
            <summary>
            获取所有正在加载界面的序列编号。
            </summary>
            <returns>所有正在加载界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.IsLoadingUIForm(System.Int32)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.IsLoadingUIForm(System.String)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.IsValidUIForm(GameFramework.UI.IUIForm)">
            <summary>
            是否是合法的界面。
            </summary>
            <param name="uiForm">界面。</param>
            <returns>界面是否合法。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Boolean)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(System.Int32)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(System.Int32,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(GameFramework.UI.IUIForm)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseAllLoadedUIForms">
            <summary>
            关闭所有已加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseAllLoadedUIForms(System.Object)">
            <summary>
            关闭所有已加载的界面。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseAllLoadingUIForms">
            <summary>
            关闭所有正在加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIManager.RefocusUIForm(GameFramework.UI.IUIForm)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.RefocusUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetUIFormLocked(GameFramework.UI.IUIForm,System.Boolean)">
            <summary>
            设置界面是否被加锁。
            </summary>
            <param name="uiForm">要设置是否被加锁的界面。</param>
            <param name="locked">界面是否被加锁。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetUIFormPriority(GameFramework.UI.IUIForm,System.Int32)">
            <summary>
            设置界面的优先级。
            </summary>
            <param name="uiForm">要设置优先级的界面。</param>
            <param name="priority">界面优先级。</param>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormDependencyAssetEventArgs">
            <summary>
            打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.#ctor(System.Int32,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            初始化打开界面时加载依赖资源事件的新实例。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.UIGroupName">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormFailureEventArgs">
            <summary>
            打开界面失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormFailureEventArgs.#ctor(System.Int32,System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>
            初始化打开界面失败事件的新实例。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.UIGroupName">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormSuccessEventArgs">
            <summary>
            打开界面成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormSuccessEventArgs.#ctor(GameFramework.UI.IUIForm,System.Single,System.Object)">
            <summary>
            初始化打开界面成功事件的新实例。
            </summary>
            <param name="uiForm">加载成功的界面。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormSuccessEventArgs.UIForm">
            <summary>
            获取打开成功的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormUpdateEventArgs">
            <summary>
            打开界面更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormUpdateEventArgs.#ctor(System.Int32,System.String,System.String,System.Boolean,System.Single,System.Object)">
            <summary>
            初始化打开界面更新事件的新实例。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="progress">打开界面进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.UIGroupName">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.Progress">
            <summary>
            获取打开界面进度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.UI.UIManager">
            <summary>
            界面管理器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.#ctor">
            <summary>
            初始化界面管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroupCount">
            <summary>
            获取界面组数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstanceAutoReleaseInterval">
            <summary>
            获取或设置界面实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstanceCapacity">
            <summary>
            获取或设置界面实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstanceExpireTime">
            <summary>
            获取或设置界面实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstancePriority">
            <summary>
            获取或设置界面实例对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormSuccess">
            <summary>
            打开界面成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormFailure">
            <summary>
            打开界面失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormUpdate">
            <summary>
            打开界面更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormDependencyAsset">
            <summary>
            打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.CloseUIFormComplete">
            <summary>
            关闭界面完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.Update(System.Single,System.Single)">
            <summary>
            界面管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.Shutdown">
            <summary>
            关闭并清理界面管理器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetUIFormHelper(GameFramework.UI.IUIFormHelper)">
            <summary>
            设置界面辅助器。
            </summary>
            <param name="uiFormHelper">界面辅助器。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.HasUIGroup(System.String)">
            <summary>
            是否存在界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>是否存在界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIGroup(System.String)">
            <summary>
            获取界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>要获取的界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllUIGroups">
            <summary>
            获取所有界面组。
            </summary>
            <returns>所有界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.AddUIGroup(System.String,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.AddUIGroup(System.String,System.Int32,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupDepth">界面组深度。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.HasUIForm(System.Int32)">
            <summary>
            是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.HasUIForm(System.String)">
            <summary>
            是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForm(System.Int32)">
            <summary>
            获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForm(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForms(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllLoadedUIForms">
            <summary>
            获取所有已加载的界面。
            </summary>
            <returns>所有已加载的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllLoadingUIFormSerialIds">
            <summary>
            获取所有正在加载界面的序列编号。
            </summary>
            <returns>所有正在加载界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.IsLoadingUIForm(System.Int32)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.IsLoadingUIForm(System.String)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.IsValidUIForm(GameFramework.UI.IUIForm)">
            <summary>
            是否是合法的界面。
            </summary>
            <param name="uiForm">界面。</param>
            <returns>界面是否合法。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Boolean)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(System.Int32)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(System.Int32,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(GameFramework.UI.IUIForm)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseAllLoadedUIForms">
            <summary>
            关闭所有已加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseAllLoadedUIForms(System.Object)">
            <summary>
            关闭所有已加载的界面。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseAllLoadingUIForms">
            <summary>
            关闭所有正在加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.RefocusUIForm(GameFramework.UI.IUIForm)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.RefocusUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetUIFormLocked(GameFramework.UI.IUIForm,System.Boolean)">
            <summary>
            设置界面是否被加锁。
            </summary>
            <param name="uiForm">要设置是否被加锁的界面。</param>
            <param name="locked">界面是否被加锁。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetUIFormPriority(GameFramework.UI.IUIForm,System.Int32)">
            <summary>
            设置界面的优先级。
            </summary>
            <param name="uiForm">要设置优先级的界面。</param>
            <param name="priority">界面优先级。</param>
        </member>
        <member name="T:GameFramework.UI.UIManager.UIFormInstanceObject">
            <summary>
            界面实例对象。
            </summary>
        </member>
        <member name="T:GameFramework.UI.UIManager.UIGroup">
            <summary>
            界面组。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.#ctor(System.String,System.Int32,GameFramework.UI.IUIGroupHelper)">
            <summary>
            初始化界面组的新实例。
            </summary>
            <param name="name">界面组名称。</param>
            <param name="depth">界面组深度。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Name">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Depth">
            <summary>
            获取或设置界面组深度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.UIFormCount">
            <summary>
            获取界面组中界面数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.CurrentUIForm">
            <summary>
            获取当前界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Helper">
            <summary>
            获取界面组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.Update(System.Single,System.Single)">
            <summary>
            界面组轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.HasUIForm(System.Int32)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.HasUIForm(System.String)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForm(System.Int32)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForm(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForms(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetAllUIForms">
            <summary>
            从界面组中获取所有界面。
            </summary>
            <returns>界面组中的所有界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.AddUIForm(GameFramework.UI.IUIForm)">
            <summary>
            往界面组增加界面。
            </summary>
            <param name="uiForm">要增加的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.RemoveUIForm(GameFramework.UI.IUIForm)">
            <summary>
            从界面组移除界面。
            </summary>
            <param name="uiForm">要移除的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.RefocusUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.Refresh">
            <summary>
            刷新界面组。
            </summary>
        </member>
        <member name="T:GameFramework.UI.UIManager.UIGroup.UIFormInfo">
            <summary>
            界面组界面信息。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.UIFormInfo.#ctor(GameFramework.UI.IUIForm)">
            <summary>
            初始化界面组界面信息的新实例。
            </summary>
            <param name="uiForm">界面。</param>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.UIFormInfo.UIForm">
            <summary>
            获取界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.UIFormInfo.Paused">
            <summary>
            获取或设置界面是否暂停。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.UIFormInfo.Covered">
            <summary>
            获取或设置界面是否遮挡。
            </summary>
        </member>
        <member name="T:GameFramework.Utility">
            <summary>
            实用函数集。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Assembly">
            <summary>
            程序集相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetLoadedAssemblyNames">
            <summary>
            获取已加载的程序集名称。
            </summary>
            <returns>已加载的程序集名称。</returns>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetTypeWithinLoadedAssemblies(System.String)">
            <summary>
            从已加载的程序集中获取类型。
            </summary>
            <param name="typeName">要获取的类型名。</param>
            <returns>获取的类型。</returns>
        </member>
        <member name="T:GameFramework.Utility.Converter">
            <summary>
            类型转换相关的实用函数。
            </summary>
        </member>
        <member name="P:GameFramework.Utility.Converter.ScreenDpi">
            <summary>
            获取或设置屏幕每英寸点数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetCentimetersFromPixels(System.Single)">
            <summary>
            将像素转换为厘米。
            </summary>
            <param name="pixels">像素。</param>
            <returns>厘米。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetPixelsFromCentimeters(System.Single)">
            <summary>
            将厘米转换为像素。
            </summary>
            <param name="centimeters">厘米。</param>
            <returns>像素。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInchesFromPixels(System.Single)">
            <summary>
            将像素转换为英寸。
            </summary>
            <param name="pixels">像素。</param>
            <returns>英寸。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetPixelsFromInches(System.Single)">
            <summary>
            将英寸转换为像素。
            </summary>
            <param name="inches">英寸。</param>
            <returns>像素。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytesFromInt(System.Int32)">
            <summary>
            以字节数组的形式返回指定的 32 位有符号整数值。
            </summary>
            <param name="int32">要转换的数字。</param>
            <returns>长度为 4 的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetIntFromBytes(System.Byte[])">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="bytes">字节数组。</param>
            <returns>由四个字节构成、从 startIndex 开始的 32 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetIntFromBytes(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="bytes">字节数组。</param>
            <param name="startIndex">bytes 内的起始位置。</param>
            <returns>由四个字节构成、从 startIndex 开始的 32 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetStringFromBytes(System.Byte[])">
            <summary>
            将 UTF-8 字节流转换为字符串。
            </summary>
            <param name="bytes">要转换的字节流。</param>
            <returns>转化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytesFromString(System.String)">
            <summary>
            将字符串转换为 UTF-8 字节流。
            </summary>
            <param name="str">要转换的字符串。</param>
            <returns>转换后的 UTF-8 字节流。</returns>
        </member>
        <member name="T:GameFramework.Utility.Encryption">
            <summary>
            加密解密相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetQuickXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算的快速版本。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            将 bytes 使用 code 做异或运算。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于等于 0，则计算整个二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="T:GameFramework.Utility.Json">
            <summary>
            JSON 相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Json.SetJsonHelper(GameFramework.Utility.Json.IJsonHelper)">
            <summary>
            设置 JSON 辅助器。
            </summary>
            <param name="jsonHelper">要设置的 JSON 辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Json.ToJson(System.Object)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToJsonData(System.Object)">
            <summary>
            将对象序列化为 JSON 流。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject``1(System.Byte[])">
            <summary>
            将 JSON 流反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="jsonData">要反序列化的 JSON 流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:GameFramework.Utility.Json.IJsonHelper">
            <summary>
            JSON 辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToJson(System.Object)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToObject``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:GameFramework.Utility.Nullable">
            <summary>
            可空类型相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Nullable.IsNullable``1(``0)">
            <summary>
            获取对象是否是可空类型。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="t">对象。</param>
            <returns>对象是否是可空类型。</returns>
        </member>
        <member name="M:GameFramework.Utility.Nullable.IsNullable``1(System.Nullable{``0})">
            <summary>
            获取对象是否是可空类型。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="t">对象。</param>
            <returns>对象是否是可空类型。</returns>
        </member>
        <member name="T:GameFramework.Utility.Path">
            <summary>
            路径相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Path.GetRegularPath(System.String)">
            <summary>
            获取规范的路径。
            </summary>
            <param name="path">要规范的路径。</param>
            <returns>规范的路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetCombinePath(System.String[])">
            <summary>
            获取连接后的路径。
            </summary>
            <param name="path">路径片段。</param>
            <returns>连接后的路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetRemotePath(System.String[])">
            <summary>
            获取远程格式的路径（带有file:// 或 http:// 前缀）。
            </summary>
            <param name="path">原始路径。</param>
            <returns>远程格式路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetResourceNameWithSuffix(System.String)">
            <summary>
            获取带有后缀的资源名。
            </summary>
            <param name="resourceName">原始资源名。</param>
            <returns>带有后缀的资源名。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetResourceNameWithCrc32AndSuffix(System.String,System.Int32)">
            <summary>
            获取带有 CRC32 和后缀的资源名。
            </summary>
            <param name="resourceName">原始资源名。</param>
            <param name="hashCode">CRC32 哈希值。</param>
            <returns>带有 CRC32 和后缀的资源名。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.RemoveEmptyDirectory(System.String)">
            <summary>
            移除空文件夹。
            </summary>
            <param name="directoryName">要处理的文件夹名称。</param>
            <returns>是否移除空文件夹成功。</returns>
        </member>
        <member name="T:GameFramework.Utility.Profiler">
            <summary>
            性能分析相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Profiler.SetProfilerHelper(GameFramework.Utility.Profiler.IProfilerHelper)">
            <summary>
            设置性能分析辅助器。
            </summary>
            <param name="profilerHelper">要设置的性能分析辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Profiler.BeginSample(System.String)">
            <summary>
            开始采样。
            </summary>
            <param name="name">采样名称。</param>
        </member>
        <member name="M:GameFramework.Utility.Profiler.EndSample">
            <summary>
            结束采样。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Profiler.IProfilerHelper">
            <summary>
            性能分析辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Profiler.IProfilerHelper.BeginSample(System.String)">
            <summary>
            开始采样。
            </summary>
            <param name="name">采样名称。</param>
        </member>
        <member name="M:GameFramework.Utility.Profiler.IProfilerHelper.EndSample">
            <summary>
            结束采样。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Random">
            <summary>
            随机相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom">
            <summary>
            返回非负随机数。
            </summary>
            <returns>大于等于零且小于 System.Int32.MaxValue 的 32 位带符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom(System.Int32)">
            <summary>
            返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。</param>
            <returns>大于等于零且小于 maxValue 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom(System.Int32,System.Int32)">
            <summary>
            返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。</param>
            <returns>一个大于等于 minValue 且小于 maxValue 的 32 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandomDouble">
            <summary>
            返回一个介于 0.0 和 1.0 之间的随机数。
            </summary>
            <returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandomBytes(System.Byte[])">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="buffer">包含随机数的字节数组。</param>
        </member>
        <member name="T:GameFramework.Utility.Text">
            <summary>
            字符相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Text.SplitToLines(System.String)">
            <summary>
            将文本按行切分。
            </summary>
            <param name="text">要切分的文本。</param>
            <returns>按行切分后的文本。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.GetFullName``1(System.String)">
            <summary>
            根据类型和名称获取完整名称。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="name">名称。</param>
            <returns>完整名称。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.GetFullName(System.Type,System.String)">
            <summary>
            根据类型和名称获取完整名称。
            </summary>
            <param name="type">类型。</param>
            <param name="name">名称。</param>
            <returns>完整名称。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.FieldNameForDisplay(System.String)">
            <summary>
            获取用于编辑器显示的名称。
            </summary>
            <param name="fieldName">字段名称。</param>
            <returns>编辑器显示名称。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.ReadLine(System.String,System.Int32@)">
            <summary>
            读取一行文本。
            </summary>
            <param name="text">要读取的文本。</param>
            <param name="position">开始的位置。</param>
            <returns>一行文本。</returns>
        </member>
        <member name="T:GameFramework.Utility.Verifier">
            <summary>
            校验相关的实用函数。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Verifier.Crc32">
            <summary>
            CRC32 算法。
            </summary>
        </member>
        <member name="F:GameFramework.Utility.Verifier.Crc32.DefaultPolynomial">
            <summary>
            默认多项式。
            </summary>
        </member>
        <member name="F:GameFramework.Utility.Verifier.Crc32.DefaultSeed">
            <summary>
            默认种子数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.#ctor">
            <summary>
            初始化 CRC32 类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            初始化 CRC32 类的新实例。
            </summary>
            <param name="polynomial">指定的多项式。</param>
            <param name="seed">指定的种子数。</param>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.Initialize">
            <summary>
            初始化 Crc32 类的实现。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将写入对象的数据路由到哈希算法以计算哈希值。
            </summary>
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.HashFinal">
            <summary>
            在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
            <returns>计算所得的哈希代码。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.Byte[])">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.String)">
            <summary>
            计算指定文件的 CRC32。
            </summary>
            <param name="fileName">指定文件的完全限定名称。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetMD5(System.Byte[])">
            <summary>
            计算二进制流的 MD5。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <returns>计算后的 MD5。</returns>
        </member>
        <member name="T:GameFramework.Utility.Zip">
            <summary>
            压缩解压缩相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Zip.SetZipHelper(GameFramework.Utility.Zip.IZipHelper)">
            <summary>
            设置压缩解压缩辅助器。
            </summary>
            <param name="zipHelper">要设置的压缩解压缩辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据。</param>
            <returns>压缩后的数据。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[])">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据。</param>
            <returns>解压缩后的数据。</returns>
        </member>
        <member name="T:GameFramework.Utility.Zip.IZipHelper">
            <summary>
            压缩解压缩辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据。</param>
            <returns>压缩后的数据。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Decompress(System.Byte[])">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据。</param>
            <returns>解压缩后的数据。</returns>
        </member>
        <member name="T:GameFramework.DontProfileAttribute">
            <summary>
            避免被注入性能采样代码的标记。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.IWebRequestAgentHelper">
            <summary>
            Web 请求代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestAgentHelper.WebRequestAgentHelperComplete">
            <summary>
            Web 请求代理辅助器完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestAgentHelper.WebRequestAgentHelperError">
            <summary>
            Web 请求代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestAgentHelper.Request(System.String,System.Object)">
            <summary>
            通过 Web 请求代理辅助器发送 Web 请求。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestAgentHelper.Request(System.String,System.Byte[],System.Object)">
            <summary>
            通过 Web 请求代理辅助器发送 Web 请求。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestAgentHelper.Reset">
            <summary>
            重置 Web 请求代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.IWebRequestManager">
            <summary>
            Web 请求管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.TotalAgentCount">
            <summary>
            获取 Web 请求代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.FreeAgentCount">
            <summary>
            获取可用 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.WorkingAgentCount">
            <summary>
            获取工作中 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.WaitingTaskCount">
            <summary>
            获取等待 Web 请求数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.Timeout">
            <summary>
            获取或设置 Web 请求超时时长，以秒为单位。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestManager.WebRequestStart">
            <summary>
            Web 请求开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestManager.WebRequestSuccess">
            <summary>
            Web 请求成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestManager.WebRequestFailure">
            <summary>
            Web 请求失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequestAgentHelper(GameFramework.WebRequest.IWebRequestAgentHelper)">
            <summary>
            增加 Web 请求代理辅助器。
            </summary>
            <param name="webRequestAgentHelper">要增加的 Web 请求代理辅助器。</param>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Byte[])">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Byte[],System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.RemoveWebRequest(System.Int32)">
            <summary>
            移除 Web 请求任务。
            </summary>
            <param name="serialId">要移除 Web 请求任务的序列编号。</param>
            <returns>是否移除 Web 请求任务成功。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.RemoveAllWebRequests">
            <summary>
            移除所有 Web 请求任务。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs">
            <summary>
            Web 请求代理辅助器完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs.#ctor(System.Byte[])">
            <summary>
            初始化 Web 请求代理辅助器完成事件的新实例。
            </summary>
            <param name="webResponseBytes">Web 响应的数据流。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs.GetWebResponseBytes">
            <summary>
            获取 Web 响应的数据流。
            </summary>
            <returns>Web 响应的数据流。</returns>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs">
            <summary>
            Web 请求代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs.#ctor(System.String)">
            <summary>
            初始化 Web 请求代理辅助器错误事件的新实例。
            </summary>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestFailureEventArgs">
            <summary>
            Web 请求失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestFailureEventArgs.#ctor(System.Int32,System.String,System.String,System.Object)">
            <summary>
            初始化 Web 请求失败事件的新实例。
            </summary>
            <param name="serialId">Web 请求任务的序列编号。</param>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.WebRequestUri">
            <summary>
            获取 Web 请求地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager">
            <summary>
            Web 请求管理器。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.#ctor">
            <summary>
            初始化 Web 请求管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.TotalAgentCount">
            <summary>
            获取 Web 请求代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.FreeAgentCount">
            <summary>
            获取可用 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WorkingAgentCount">
            <summary>
            获取工作中 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WaitingTaskCount">
            <summary>
            获取等待 Web 请求数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.Timeout">
            <summary>
            获取或设置 Web 请求超时时长，以秒为单位。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.WebRequestManager.WebRequestStart">
            <summary>
            Web 请求开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.WebRequestManager.WebRequestSuccess">
            <summary>
            Web 请求成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.WebRequestManager.WebRequestFailure">
            <summary>
            Web 请求失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.Update(System.Single,System.Single)">
            <summary>
            Web 请求管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.Shutdown">
            <summary>
            关闭并清理 Web 请求管理器。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequestAgentHelper(GameFramework.WebRequest.IWebRequestAgentHelper)">
            <summary>
            增加 Web 请求代理辅助器。
            </summary>
            <param name="webRequestAgentHelper">要增加的 Web 请求代理辅助器。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Byte[])">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Byte[],System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.RemoveWebRequest(System.Int32)">
            <summary>
            移除 Web 请求任务。
            </summary>
            <param name="serialId">要移除 Web 请求任务的序列编号。</param>
            <returns>是否移除 Web 请求任务成功。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.RemoveAllWebRequests">
            <summary>
            移除所有 Web 请求任务。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager.WebRequestAgent">
            <summary>
            Web 请求代理。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.#ctor(GameFramework.WebRequest.IWebRequestAgentHelper)">
            <summary>
            初始化 Web 请求代理的新实例。
            </summary>
            <param name="webRequestAgentHelper">Web 请求代理辅助器。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Task">
            <summary>
            获取 Web 请求任务。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.WaitTime">
            <summary>
            获取已经等待时间。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Initialize">
            <summary>
            初始化 Web 请求代理。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Update(System.Single,System.Single)">
            <summary>
            Web 请求代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Shutdown">
            <summary>
            关闭并清理 Web 请求代理。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Start(GameFramework.WebRequest.WebRequestManager.WebRequestTask)">
            <summary>
            开始处理 Web 请求任务。
            </summary>
            <param name="task">要处理的 Web 请求任务。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Reset">
            <summary>
            重置 Web 请求代理。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager.WebRequestTask">
            <summary>
            Web 请求任务。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestTask.#ctor(System.String,System.Byte[],System.Single,System.Object)">
            <summary>
            初始化 Web 请求任务的新实例。
            </summary>
            <param name="webRequestUri">要发送的远程地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="timeout">下载超时时长，以秒为单位。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Done">
            <summary>
            获取或设置 Web 请求任务是否完成。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Status">
            <summary>
            获取或设置 Web 请求任务的状态。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.WebRequestUri">
            <summary>
            获取要发送的远程地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Timeout">
            <summary>
            获取 Web 请求超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestTask.GetPostData">
            <summary>
            获取要发送的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus">
            <summary>
            Web 请求任务的状态。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Todo">
            <summary>
            准备请求。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Doing">
            <summary>
            请求中。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Done">
            <summary>
            请求完成。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Error">
            <summary>
            请求错误。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestStartEventArgs">
            <summary>
            Web 请求开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestStartEventArgs.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            初始化 Web 请求开始事件的新实例。
            </summary>
            <param name="serialId">Web 请求任务的序列编号。</param>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestStartEventArgs.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestStartEventArgs.WebRequestUri">
            <summary>
            获取 Web 请求地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestStartEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestSuccessEventArgs">
            <summary>
            Web 请求成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestSuccessEventArgs.#ctor(System.Int32,System.String,System.Byte[],System.Object)">
            <summary>
            初始化 Web 请求成功事件的新实例。
            </summary>
            <param name="serialId">Web 请求任务的序列编号。</param>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="webResponseBytes">Web 响应的数据流。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestSuccessEventArgs.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestSuccessEventArgs.WebRequestUri">
            <summary>
            获取 Web 请求地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestSuccessEventArgs.GetWebResponseBytes">
            <summary>
            获取 Web 响应的数据流。
            </summary>
            <returns>Web 响应的数据流。</returns>
        </member>
    </members>
</doc>
